import { defineComponent as y, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as H, unref as t, renderSlot as M, createCommentVNode as f, createElementVNode as a } from "vue";
const V = ["width", "height", "fill", "transform"], Z = { key: 0 }, w = /* @__PURE__ */ a("path", { d: "M208.5,143.5a12,12,0,0,1,0,17,12.1,12.1,0,0,1-17,0L140,109V224a12,12,0,0,1-24,0V109L64.5,160.5a12,12,0,0,1-17-17l72-72a12,12,0,0,1,17,0ZM216,28H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Z" }, null, -1), L = [
  w
], k = { key: 1 }, v = /* @__PURE__ */ a("path", { d: "M205.7,138.3a8.1,8.1,0,0,1,0,11.4,8.2,8.2,0,0,1-11.4,0L136,91.3V224a8,8,0,0,1-16,0V91.3L61.7,149.7a8.1,8.1,0,0,1-11.4-11.4l72-72a8.1,8.1,0,0,1,11.4,0ZM216,32H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }, null, -1), x = [
  v
], S = { key: 2 }, z = /* @__PURE__ */ a("path", { d: "M205.7,138.3a8.4,8.4,0,0,1,1.7,8.8A8,8,0,0,1,200,152H136v72a8,8,0,0,1-16,0V152H56a8,8,0,0,1-7.4-4.9,8.4,8.4,0,0,1,1.7-8.8l72-72a8.1,8.1,0,0,1,11.4,0ZM216,32H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }, null, -1), C = [
  z
], B = { key: 3 }, N = /* @__PURE__ */ a("path", { d: "M204.2,139.8a5.9,5.9,0,1,1-8.4,8.4L134,86.5V224a6,6,0,0,1-12,0V86.5L60.2,148.2a5.9,5.9,0,0,1-8.4-8.4l72-72a5.8,5.8,0,0,1,8.4,0ZM216,34H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Z" }, null, -1), b = [
  N
], A = { key: 4 }, E = /* @__PURE__ */ a("path", { d: "M205.7,138.3a8.1,8.1,0,0,1,0,11.4,8.2,8.2,0,0,1-11.4,0L136,91.3V224a8,8,0,0,1-16,0V91.3L61.7,149.7a8.1,8.1,0,0,1-11.4-11.4l72-72a8.1,8.1,0,0,1,11.4,0ZM216,32H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }, null, -1), P = [
  E
], W = { key: 5 }, $ = /* @__PURE__ */ a("path", { d: "M202.8,141.2a3.9,3.9,0,0,1,0,5.6,3.9,3.9,0,0,1-5.6,0L132,81.7V224a4,4,0,0,1-8,0V81.7L58.8,146.8a4,4,0,0,1-5.6-5.6l72-72a3.9,3.9,0,0,1,5.6,0ZM216,36H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Z" }, null, -1), j = [
  $
], U = {
  name: "PhArrowLineUp"
}, F = /* @__PURE__ */ y({
  ...U,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const n = c, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), s = r(() => n.weight ?? _), l = r(() => n.size ?? h), m = r(() => n.color ?? p), u = r(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, q) => (o(), e("svg", H({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(l),
      height: t(l),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      M(d.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", Z, L)) : t(s) === "duotone" ? (o(), e("g", k, x)) : t(s) === "fill" ? (o(), e("g", S, C)) : t(s) === "light" ? (o(), e("g", B, b)) : t(s) === "regular" ? (o(), e("g", A, P)) : t(s) === "thin" ? (o(), e("g", W, j)) : f("", !0)
    ], 16, V));
  }
});
export {
  F as default
};
