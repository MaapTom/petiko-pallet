import { defineComponent as y, inject as i, computed as r, openBlock as e, createElementBlock as s, mergeProps as f, unref as t, renderSlot as w, createCommentVNode as A, createElementVNode as o } from "vue";
const M = ["width", "height", "fill", "transform"], k = { key: 0 }, Z = /* @__PURE__ */ o("path", { d: "M128,188a12.2,12.2,0,0,1-8.5-3.5l-80-80a12,12,0,0,1,17-17L128,159l71.5-71.5a12,12,0,0,1,17,17l-80,80A12.2,12.2,0,0,1,128,188Z" }, null, -1), v = [
  Z
], x = { key: 1 }, C = /* @__PURE__ */ o("g", { opacity: "0.2" }, [
  /* @__PURE__ */ o("polygon", { points: "208 96 128 176 48 96 208 96" })
], -1), S = /* @__PURE__ */ o("path", { d: "M128,184a8.5,8.5,0,0,1-5.7-2.3l-80-80a8.4,8.4,0,0,1-1.7-8.8A8,8,0,0,1,48,88H208a8,8,0,0,1,7.4,4.9,8.4,8.4,0,0,1-1.7,8.8l-80,80A8.5,8.5,0,0,1,128,184ZM67.3,104,128,164.7,188.7,104Z" }, null, -1), z = [
  C,
  S
], B = { key: 2 }, L = /* @__PURE__ */ o("path", { d: "M213.7,101.7l-80,80a8.2,8.2,0,0,1-11.4,0l-80-80a8.4,8.4,0,0,1-1.7-8.8A8,8,0,0,1,48,88H208a8,8,0,0,1,7.4,4.9A8.4,8.4,0,0,1,213.7,101.7Z" }, null, -1), N = [
  L
], b = { key: 3 }, E = /* @__PURE__ */ o("path", { d: "M128,182a5.8,5.8,0,0,1-4.2-1.8l-80-80a5.9,5.9,0,0,1,8.4-8.4L128,167.5l75.8-75.7a5.9,5.9,0,0,1,8.4,8.4l-80,80A5.8,5.8,0,0,1,128,182Z" }, null, -1), H = [
  E
], P = { key: 4 }, V = /* @__PURE__ */ o("path", { d: "M128,184a8.5,8.5,0,0,1-5.7-2.3l-80-80A8.1,8.1,0,0,1,53.7,90.3L128,164.7l74.3-74.4a8.1,8.1,0,0,1,11.4,11.4l-80,80A8.5,8.5,0,0,1,128,184Z" }, null, -1), W = [
  V
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M128,180a3.9,3.9,0,0,1-2.8-1.2l-80-80a4,4,0,0,1,5.6-5.6L128,170.3l77.2-77.1a4,4,0,1,1,5.6,5.6l-80,80A3.9,3.9,0,0,1,128,180Z" }, null, -1), D = [
  j
], q = {
  name: "PhCaretDown"
}, I = /* @__PURE__ */ y({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(a) {
    const l = a, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), n = r(() => l.weight ?? _), c = r(() => l.size ?? h), m = r(() => l.color ?? p), u = r(() => l.mirrored !== void 0 ? l.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, F) => (e(), s("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      w(d.$slots, "default"),
      t(n) === "bold" ? (e(), s("g", k, v)) : t(n) === "duotone" ? (e(), s("g", x, z)) : t(n) === "fill" ? (e(), s("g", B, N)) : t(n) === "light" ? (e(), s("g", b, H)) : t(n) === "regular" ? (e(), s("g", P, W)) : t(n) === "thin" ? (e(), s("g", $, D)) : A("", !0)
    ], 16, M));
  }
});
export {
  I as default
};
