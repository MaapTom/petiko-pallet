import { defineComponent as y, inject as r, computed as d, openBlock as e, createElementBlock as s, mergeProps as f, unref as t, renderSlot as M, createCommentVNode as Z, createElementVNode as o } from "vue";
const A = ["width", "height", "fill", "transform"], w = { key: 0 }, H = /* @__PURE__ */ o("path", { d: "M132,228H47.7A19.7,19.7,0,0,1,28,208.3V124A104,104,0,1,1,132,228ZM52,204h80a80,80,0,1,0-80-80Z" }, null, -1), V = [
  H
], k = { key: 1 }, v = /* @__PURE__ */ o("g", { opacity: "0.2" }, [
  /* @__PURE__ */ o("path", { d: "M132,216H47.7a7.6,7.6,0,0,1-7.7-7.7V124a92,92,0,0,1,92-92h0a92,92,0,0,1,92,92h0A92,92,0,0,1,132,216Z" })
], -1), x = /* @__PURE__ */ o("path", { d: "M132,224H47.7A15.7,15.7,0,0,1,32,208.3V124A100,100,0,1,1,132,224ZM48,208h84a84,84,0,1,0-84-84Z" }, null, -1), C = [
  v,
  x
], S = { key: 2 }, z = /* @__PURE__ */ o("path", { d: "M232,124A100.2,100.2,0,0,1,132,224H47.7A15.7,15.7,0,0,1,32,208.3V124a100,100,0,0,1,200,0Z" }, null, -1), B = [
  z
], N = { key: 3 }, b = /* @__PURE__ */ o("path", { d: "M132,222H47.7A13.7,13.7,0,0,1,34,208.3V124a98,98,0,1,1,98,98Zm0-184a86.1,86.1,0,0,0-86,86v84.3a1.7,1.7,0,0,0,1.7,1.7H132a86,86,0,0,0,0-172Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ o("path", { d: "M132,224H47.7A15.7,15.7,0,0,1,32,208.3V124A100,100,0,1,1,132,224ZM48,208h84a84,84,0,1,0-84-84Z" }, null, -1), $ = [
  W
], j = { key: 5 }, T = /* @__PURE__ */ o("path", { d: "M132,220H47.7A11.7,11.7,0,0,1,36,208.3V124a96,96,0,1,1,96,96Zm0-184a88.1,88.1,0,0,0-88,88v84.3a3.6,3.6,0,0,0,3.7,3.7H132a88,88,0,0,0,0-176Z" }, null, -1), q = [
  T
], D = {
  name: "PhChatTeardrop"
}, I = /* @__PURE__ */ y({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(a) {
    const i = a, l = r("weight", "regular"), _ = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), n = d(() => i.weight ?? l), c = d(() => i.size ?? _), m = d(() => i.color ?? p), u = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (h, F) => (e(), s("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(m),
      transform: t(u)
    }, h.$attrs), [
      M(h.$slots, "default"),
      t(n) === "bold" ? (e(), s("g", w, V)) : t(n) === "duotone" ? (e(), s("g", k, C)) : t(n) === "fill" ? (e(), s("g", S, B)) : t(n) === "light" ? (e(), s("g", N, E)) : t(n) === "regular" ? (e(), s("g", P, $)) : t(n) === "thin" ? (e(), s("g", j, q)) : Z("", !0)
    ], 16, A));
  }
});
export {
  I as default
};
