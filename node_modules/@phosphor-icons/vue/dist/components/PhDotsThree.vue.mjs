import { defineComponent as y, inject as i, computed as c, openBlock as e, createElementBlock as s, mergeProps as A, unref as t, renderSlot as Z, createCommentVNode as f, createElementVNode as o } from "vue";
const w = ["width", "height", "fill", "transform"], x = { key: 0 }, k = /* @__PURE__ */ o("path", { d: "M80,128a16,16,0,1,1-16-16A16,16,0,0,1,80,128Zm112-16a16,16,0,1,0,16,16A16,16,0,0,0,192,112Zm-64,0a16,16,0,1,0,16,16A16,16,0,0,0,128,112Z" }, null, -1), M = [
  k
], v = { key: 1 }, S = /* @__PURE__ */ o("circle", {
  cx: "64",
  cy: "128",
  r: "12"
}, null, -1), z = /* @__PURE__ */ o("circle", {
  cx: "192",
  cy: "128",
  r: "12"
}, null, -1), C = /* @__PURE__ */ o("circle", {
  cx: "128",
  cy: "128",
  r: "12"
}, null, -1), B = [
  S,
  z,
  C
], N = { key: 2 }, b = /* @__PURE__ */ o("path", { d: "M76,128a12,12,0,1,1-12-12A12,12,0,0,1,76,128Zm52-12a12,12,0,1,0,12,12A12,12,0,0,0,128,116Zm64,0a12,12,0,1,0,12,12A12,12,0,0,0,192,116Z" }, null, -1), E = [
  b
], P = { key: 3 }, V = /* @__PURE__ */ o("path", { d: "M74,128a10,10,0,1,1-10-10A10,10,0,0,1,74,128Zm118-10a10,10,0,1,0,10,10A10,10,0,0,0,192,118Zm-64,0a10,10,0,1,0,10,10A10,10,0,0,0,128,118Z" }, null, -1), W = [
  V
], $ = { key: 4 }, j = /* @__PURE__ */ o("path", { d: "M76,128a12,12,0,1,1-12-12A12,12,0,0,1,76,128Zm116-12a12,12,0,1,0,12,12A12,12,0,0,0,192,116Zm-64,0a12,12,0,1,0,12,12A12,12,0,0,0,128,116Z" }, null, -1), D = [
  j
], T = { key: 5 }, q = /* @__PURE__ */ o("path", { d: "M72,128a8,8,0,1,1-8-8A8,8,0,0,1,72,128Zm120-8a8,8,0,1,0,8,8A8,8,0,0,0,192,120Zm-64,0a8,8,0,1,0,8,8A8,8,0,0,0,128,120Z" }, null, -1), F = [
  q
], G = {
  name: "PhDotsThree"
}, J = /* @__PURE__ */ y({
  ...G,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(_) {
    const r = _, a = i("weight", "regular"), h = i("size", "1em"), m = i("color", "currentColor"), p = i("mirrored", !1), n = c(() => r.weight ?? a), l = c(() => r.size ?? h), g = c(() => r.color ?? m), u = c(() => r.mirrored !== void 0 ? r.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (d, H) => (e(), s("svg", A({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(l),
      height: t(l),
      fill: t(g),
      transform: t(u)
    }, d.$attrs), [
      Z(d.$slots, "default"),
      t(n) === "bold" ? (e(), s("g", x, M)) : t(n) === "duotone" ? (e(), s("g", v, B)) : t(n) === "fill" ? (e(), s("g", N, E)) : t(n) === "light" ? (e(), s("g", P, W)) : t(n) === "regular" ? (e(), s("g", $, D)) : t(n) === "thin" ? (e(), s("g", T, F)) : f("", !0)
    ], 16, w));
  }
});
export {
  J as default
};
