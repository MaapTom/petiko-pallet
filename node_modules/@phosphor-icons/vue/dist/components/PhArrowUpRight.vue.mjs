import { defineComponent as y, inject as r, computed as d, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as V, createCommentVNode as L, createElementVNode as n } from "vue";
const w = ["width", "height", "fill", "transform"], H = { key: 0 }, k = /* @__PURE__ */ n("path", { d: "M204,64V168a12,12,0,0,1-24,0V93L72.5,200.5a12.1,12.1,0,0,1-17,0,12,12,0,0,1,0-17L163,76H88a12,12,0,0,1,0-24H192A12,12,0,0,1,204,64Z" }, null, -1), A = [
  k
], M = { key: 1 }, v = /* @__PURE__ */ n("path", { d: "M200,64V168a8,8,0,0,1-16,0V83.3L69.7,197.7a8.2,8.2,0,0,1-11.4,0,8.1,8.1,0,0,1,0-11.4L172.7,72H88a8,8,0,0,1,0-16H192A8,8,0,0,1,200,64Z" }, null, -1), x = [
  v
], S = { key: 2 }, Z = /* @__PURE__ */ n("path", { d: "M200,64V168a8,8,0,0,1-4.9,7.4,8.5,8.5,0,0,1-3.1.6,8.3,8.3,0,0,1-5.7-2.3L140,127.3,69.7,197.7a8.2,8.2,0,0,1-11.4,0,8.1,8.1,0,0,1,0-11.4L128.7,116,82.3,69.7a8.4,8.4,0,0,1-1.7-8.8A8,8,0,0,1,88,56H192A8,8,0,0,1,200,64Z" }, null, -1), z = [
  Z
], C = { key: 3 }, B = /* @__PURE__ */ n("path", { d: "M198,64V168a6,6,0,0,1-12,0V78.5L68.2,196.2a5.9,5.9,0,0,1-8.4-8.4L177.5,70H88a6,6,0,0,1,0-12H192A6,6,0,0,1,198,64Z" }, null, -1), N = [
  B
], b = { key: 4 }, E = /* @__PURE__ */ n("path", { d: "M200,64V168a8,8,0,0,1-16,0V83.3L69.7,197.7a8.2,8.2,0,0,1-11.4,0,8.1,8.1,0,0,1,0-11.4L172.7,72H88a8,8,0,0,1,0-16H192A8,8,0,0,1,200,64Z" }, null, -1), P = [
  E
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M196,64V168a4,4,0,0,1-8,0V73.7L66.8,194.8a3.9,3.9,0,0,1-5.6,0,3.9,3.9,0,0,1,0-5.6L182.3,68H88a4,4,0,0,1,0-8H192A4,4,0,0,1,196,64Z" }, null, -1), j = [
  $
], R = {
  name: "PhArrowUpRight"
}, D = /* @__PURE__ */ y({
  ...R,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), s = d(() => i.weight ?? _), c = d(() => i.size ?? h), m = d(() => i.color ?? p), u = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (a, U) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(m),
      transform: t(u)
    }, a.$attrs), [
      V(a.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", H, A)) : t(s) === "duotone" ? (o(), e("g", M, x)) : t(s) === "fill" ? (o(), e("g", S, z)) : t(s) === "light" ? (o(), e("g", C, N)) : t(s) === "regular" ? (o(), e("g", b, P)) : t(s) === "thin" ? (o(), e("g", W, j)) : L("", !0)
    ], 16, w));
  }
});
export {
  D as default
};
