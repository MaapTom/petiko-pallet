import { defineComponent as H, inject as r, computed as a, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as f, createCommentVNode as A, createElementVNode as n } from "vue";
const w = ["width", "height", "fill", "transform"], k = { key: 0 }, M = /* @__PURE__ */ n("path", { d: "M167.5,127.5,195,100H88a44,44,0,0,0,0,88h88a12,12,0,0,1,0,24H88A68,68,0,0,1,88,76H195L167.5,48.5a12,12,0,0,1,17-17l48,48a12,12,0,0,1,0,17l-48,48a12.1,12.1,0,0,1-17,0A12,12,0,0,1,167.5,127.5Z" }, null, -1), v = [
  M
], x = { key: 1 }, S = /* @__PURE__ */ n("path", { d: "M170.3,130.3,204.7,96H88a48,48,0,0,0,0,96h88a8,8,0,0,1,0,16H88A64,64,0,0,1,88,80H204.7L170.3,45.7a8.1,8.1,0,0,1,11.4-11.4l48,48a8.1,8.1,0,0,1,0,11.4l-48,48a8.2,8.2,0,0,1-11.4,0A8.1,8.1,0,0,1,170.3,130.3Z" }, null, -1), Z = [
  S
], z = { key: 2 }, C = /* @__PURE__ */ n("path", { d: "M168,136V96H88a48,48,0,0,0,0,96h88a8,8,0,0,1,0,16H88A64,64,0,0,1,88,80h80V40a8,8,0,0,1,4.9-7.4,8.4,8.4,0,0,1,8.8,1.7l48,48a8.1,8.1,0,0,1,0,11.4l-48,48A8.3,8.3,0,0,1,176,144a8.5,8.5,0,0,1-3.1-.6A8,8,0,0,1,168,136Z" }, null, -1), L = [
  C
], B = { key: 3 }, V = /* @__PURE__ */ n("path", { d: "M171.8,131.8,209.5,94H88a50,50,0,0,0,0,100h88a6,6,0,0,1,0,12H88A62,62,0,0,1,88,82H209.5L171.8,44.2a5.9,5.9,0,0,1,8.4-8.4l48,48a5.8,5.8,0,0,1,0,8.4l-48,48a5.9,5.9,0,0,1-8.4-8.4Z" }, null, -1), N = [
  V
], b = { key: 4 }, E = /* @__PURE__ */ n("path", { d: "M170.3,130.3,204.7,96H88a48,48,0,0,0,0,96h88a8,8,0,0,1,0,16H88A64,64,0,0,1,88,80H204.7L170.3,45.7a8.1,8.1,0,0,1,11.4-11.4l48,48a8.1,8.1,0,0,1,0,11.4l-48,48a8.2,8.2,0,0,1-11.4,0A8.1,8.1,0,0,1,170.3,130.3Z" }, null, -1), P = [
  E
], U = { key: 5 }, W = /* @__PURE__ */ n("path", { d: "M173.2,133.2,214.3,92H88a52,52,0,0,0,0,104h88a4,4,0,0,1,0,8H88A60,60,0,0,1,88,84H214.3L173.2,42.8a4,4,0,0,1,5.6-5.6l48,48a3.9,3.9,0,0,1,0,5.6l-48,48a3.9,3.9,0,0,1-5.6,0A3.9,3.9,0,0,1,173.2,133.2Z" }, null, -1), $ = [
  W
], j = {
  name: "PhArrowUUpRight"
}, D = /* @__PURE__ */ H({
  ...j,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const i = c, h = r("weight", "regular"), _ = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), s = a(() => i.weight ?? h), l = a(() => i.size ?? _), m = a(() => i.color ?? p), u = a(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, R) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(l),
      height: t(l),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      f(d.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", k, v)) : t(s) === "duotone" ? (o(), e("g", x, Z)) : t(s) === "fill" ? (o(), e("g", z, L)) : t(s) === "light" ? (o(), e("g", B, N)) : t(s) === "regular" ? (o(), e("g", b, P)) : t(s) === "thin" ? (o(), e("g", U, $)) : A("", !0)
    ], 16, w));
  }
});
export {
  D as default
};
