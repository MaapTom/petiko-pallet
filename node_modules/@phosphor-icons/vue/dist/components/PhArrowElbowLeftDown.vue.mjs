import { defineComponent as f, inject as r, computed as i, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as w, createCommentVNode as H, createElementVNode as n } from "vue";
const V = ["width", "height", "fill", "transform"], A = { key: 0 }, k = /* @__PURE__ */ n("path", { d: "M236,64a12,12,0,0,1-12,12H92V179l27.5-27.5a12,12,0,0,1,17,17l-48,48a12.1,12.1,0,0,1-17,0l-48-48a12,12,0,0,1,17-17L68,179V64A12,12,0,0,1,80,52H224A12,12,0,0,1,236,64Z" }, null, -1), M = [
  k
], v = { key: 1 }, x = /* @__PURE__ */ n("path", { d: "M232,64a8,8,0,0,1-8,8H88V188.7l34.3-34.4a8.1,8.1,0,1,1,11.4,11.4l-48,48a8.2,8.2,0,0,1-11.4,0l-48-48a8.1,8.1,0,0,1,11.4-11.4L72,188.7V64a8,8,0,0,1,8-8H224A8,8,0,0,1,232,64Z" }, null, -1), L = [
  x
], S = { key: 2 }, Z = /* @__PURE__ */ n("path", { d: "M232,64a8,8,0,0,1-8,8H88v80h40a8,8,0,0,1,7.4,4.9,8.4,8.4,0,0,1-1.7,8.8l-48,48a8.2,8.2,0,0,1-11.4,0l-48-48a8.4,8.4,0,0,1-1.7-8.8A8,8,0,0,1,32,152H72V64a8,8,0,0,1,8-8H224A8,8,0,0,1,232,64Z" }, null, -1), z = [
  Z
], C = { key: 3 }, B = /* @__PURE__ */ n("path", { d: "M230,64a6,6,0,0,1-6,6H86V193.5l37.8-37.7a5.9,5.9,0,1,1,8.4,8.4l-48,48a5.8,5.8,0,0,1-8.4,0l-48-48a5.9,5.9,0,1,1,8.4-8.4L74,193.5V64a6,6,0,0,1,6-6H224A6,6,0,0,1,230,64Z" }, null, -1), b = [
  B
], E = { key: 4 }, N = /* @__PURE__ */ n("path", { d: "M232,64a8,8,0,0,1-8,8H88V188.7l34.3-34.4a8.1,8.1,0,1,1,11.4,11.4l-48,48a8.2,8.2,0,0,1-11.4,0l-48-48a8.1,8.1,0,0,1,11.4-11.4L72,188.7V64a8,8,0,0,1,8-8H224A8,8,0,0,1,232,64Z" }, null, -1), P = [
  N
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M228,64a4,4,0,0,1-4,4H84V198.3l41.2-41.1a4,4,0,0,1,5.6,5.6l-48,48a3.9,3.9,0,0,1-5.6,0l-48-48a4,4,0,0,1,5.6-5.6L76,198.3V64a4,4,0,0,1,4-4H224A4,4,0,0,1,228,64Z" }, null, -1), j = [
  $
], D = {
  name: "PhArrowElbowLeftDown"
}, G = /* @__PURE__ */ f({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const l = c, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), s = i(() => l.weight ?? _), a = i(() => l.size ?? h), m = i(() => l.color ?? p), u = i(() => l.mirrored !== void 0 ? l.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, q) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      w(d.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", A, M)) : t(s) === "duotone" ? (o(), e("g", v, L)) : t(s) === "fill" ? (o(), e("g", S, z)) : t(s) === "light" ? (o(), e("g", C, b)) : t(s) === "regular" ? (o(), e("g", E, P)) : t(s) === "thin" ? (o(), e("g", W, j)) : H("", !0)
    ], 16, V));
  }
});
export {
  G as default
};
