import { defineComponent as u, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as Z, unref as t, renderSlot as y, createCommentVNode as f, createElementVNode as n } from "vue";
const w = ["width", "height", "fill", "transform"], k = { key: 0 }, M = /* @__PURE__ */ n("path", { d: "M204,128a12,12,0,0,1-12,12H64a12,12,0,0,1,0-24H192A12,12,0,0,1,204,128Zm28-60H24a12,12,0,0,0,0,24H232a12,12,0,0,0,0-24Zm-80,96H104a12,12,0,0,0,0,24h48a12,12,0,0,0,0-24Z" }, null, -1), S = [
  M
], v = { key: 1 }, x = /* @__PURE__ */ n("path", { d: "M200,128a8,8,0,0,1-8,8H64a8,8,0,0,1,0-16H192A8,8,0,0,1,200,128Zm32-56H24a8,8,0,0,0,0,16H232a8,8,0,0,0,0-16Zm-80,96H104a8,8,0,0,0,0,16h48a8,8,0,0,0,0-16Z" }, null, -1), A = [
  x
], z = { key: 2 }, C = /* @__PURE__ */ n("path", { d: "M200,128a8,8,0,0,1-8,8H64a8,8,0,0,1,0-16H192A8,8,0,0,1,200,128Zm32-56H24a8,8,0,0,0,0,16H232a8,8,0,0,0,0-16Zm-80,96H104a8,8,0,0,0,0,16h48a8,8,0,0,0,0-16Z" }, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ n("path", { d: "M198,128a6,6,0,0,1-6,6H64a6,6,0,0,1,0-12H192A6,6,0,0,1,198,128Zm34-54H24a6,6,0,0,0,0,12H232a6,6,0,0,0,0-12Zm-80,96H104a6,6,0,0,0,0,12h48a6,6,0,0,0,0-12Z" }, null, -1), E = [
  b
], P = { key: 4 }, V = /* @__PURE__ */ n("path", { d: "M200,128a8,8,0,0,1-8,8H64a8,8,0,0,1,0-16H192A8,8,0,0,1,200,128Zm32-56H24a8,8,0,0,0,0,16H232a8,8,0,0,0,0-16Zm-80,96H104a8,8,0,0,0,0,16h48a8,8,0,0,0,0-16Z" }, null, -1), W = [
  V
], $ = { key: 5 }, j = /* @__PURE__ */ n("path", { d: "M196,128a4,4,0,0,1-4,4H64a4,4,0,0,1,0-8H192A4,4,0,0,1,196,128Zm36-52H24a4,4,0,0,0,0,8H232a4,4,0,0,0,0-8Zm-80,96H104a4,4,0,0,0,0,8h48a4,4,0,0,0,0-8Z" }, null, -1), F = [
  j
], q = {
  name: "PhFunnelSimple"
}, I = /* @__PURE__ */ u({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const a = l, h = i("weight", "regular"), _ = i("size", "1em"), m = i("color", "currentColor"), H = i("mirrored", !1), s = r(() => a.weight ?? h), d = r(() => a.size ?? _), p = r(() => a.color ?? m), g = r(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : H ? "scale(-1, 1)" : void 0);
    return (c, D) => (o(), e("svg", Z({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(p),
      transform: t(g)
    }, c.$attrs), [
      y(c.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", k, S)) : t(s) === "duotone" ? (o(), e("g", v, A)) : t(s) === "fill" ? (o(), e("g", z, B)) : t(s) === "light" ? (o(), e("g", N, E)) : t(s) === "regular" ? (o(), e("g", P, W)) : t(s) === "thin" ? (o(), e("g", $, F)) : f("", !0)
    ], 16, w));
  }
});
export {
  I as default
};
