import { defineComponent as v, inject as i, computed as a, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as y, createCommentVNode as A, createElementVNode as n } from "vue";
const w = ["width", "height", "fill", "transform"], k = { key: 0 }, M = /* @__PURE__ */ n("path", { d: "M236,184a12,12,0,0,1-24,0A84,84,0,0,0,68.6,124.6L57.1,136.1h35a12,12,0,0,1,0,24h-64a12,12,0,0,1-12-12v-64a12,12,0,0,1,24,0v35l11.5-11.5A108,108,0,0,1,236,184Z" }, null, -1), L = [
  M
], x = { key: 1 }, S = /* @__PURE__ */ n("path", { d: "M232,184a8,8,0,0,1-16,0A88,88,0,0,0,65.8,121.8L47.4,140.1H92.1a8,8,0,0,1,0,16h-64a8,8,0,0,1-8-8v-64a8,8,0,0,1,16,0v44.7l18.4-18.3a103.8,103.8,0,0,1,147,0A102.9,102.9,0,0,1,232,184Z" }, null, -1), Z = [
  S
], z = { key: 2 }, C = /* @__PURE__ */ n("path", { d: "M232,184a8,8,0,0,1-16,0A88,88,0,0,0,71.7,116.4l26.1,26.1a8,8,0,0,1,1.7,8.7,7.9,7.9,0,0,1-7.4,4.9h-64a8,8,0,0,1-8-8v-64a8,8,0,0,1,13.7-5.6L60.3,105a104,104,0,0,1,141.2,5.5A102.9,102.9,0,0,1,232,184Z" }, null, -1), B = [
  C
], H = { key: 3 }, N = /* @__PURE__ */ n("path", { d: "M230,184a6,6,0,0,1-12,0A89.9,89.9,0,0,0,64.4,120.4L42.6,142.1H92.1a6,6,0,0,1,0,12h-64a6,6,0,0,1-6-6v-64a6,6,0,0,1,12,0v49.5l21.8-21.7A102,102,0,0,1,230,184Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ n("path", { d: "M232,184a8,8,0,0,1-16,0A88,88,0,0,0,65.8,121.8L47.4,140.1H92.1a8,8,0,0,1,0,16h-64a8,8,0,0,1-8-8v-64a8,8,0,0,1,16,0v44.7l18.4-18.3a103.8,103.8,0,0,1,147,0A102.9,102.9,0,0,1,232,184Z" }, null, -1), V = [
  P
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M228,184a4,4,0,0,1-8,0A92.1,92.1,0,0,0,62.9,118.9L37.8,144.1H92.1a4,4,0,0,1,0,8h-64a4,4,0,0,1-4-4v-64a4,4,0,0,1,8,0v54.4l25.2-25.2A100,100,0,0,1,228,184Z" }, null, -1), j = [
  $
], q = {
  name: "PhArrowArcLeft"
}, G = /* @__PURE__ */ v({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const r = d, h = i("weight", "regular"), _ = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), s = a(() => r.weight ?? h), l = a(() => r.size ?? _), m = a(() => r.color ?? p), u = a(() => r.mirrored !== void 0 ? r.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (c, D) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(l),
      height: t(l),
      fill: t(m),
      transform: t(u)
    }, c.$attrs), [
      y(c.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", k, L)) : t(s) === "duotone" ? (o(), e("g", x, Z)) : t(s) === "fill" ? (o(), e("g", z, B)) : t(s) === "light" ? (o(), e("g", H, b)) : t(s) === "regular" ? (o(), e("g", E, V)) : t(s) === "thin" ? (o(), e("g", W, j)) : A("", !0)
    ], 16, w));
  }
});
export {
  G as default
};
