import { defineComponent as f, inject as i, computed as l, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as w, createCommentVNode as L, createElementVNode as n } from "vue";
const V = ["width", "height", "fill", "transform"], H = { key: 0 }, k = /* @__PURE__ */ n("path", { d: "M240.5,104.5l-96,96a12.1,12.1,0,0,1-17,0L36,109v43a12,12,0,0,1-24,0V80A12,12,0,0,1,24,68H96a12,12,0,0,1,0,24H53l83,83,87.5-87.5a12,12,0,0,1,17,17Z" }, null, -1), M = [
  k
], v = { key: 1 }, x = /* @__PURE__ */ n("path", { d: "M237.7,101.7l-96,96a8.2,8.2,0,0,1-11.4,0L32,99.3V152a8,8,0,0,1-16,0V80a8,8,0,0,1,8-8H96a8,8,0,0,1,0,16H43.3L136,180.7l90.3-90.4a8.1,8.1,0,0,1,11.4,11.4Z" }, null, -1), S = [
  x
], Z = { key: 2 }, z = /* @__PURE__ */ n("path", { d: "M237.7,101.7l-96,96a8.2,8.2,0,0,1-11.4,0L60,127.3,29.7,157.7A8.3,8.3,0,0,1,24,160a8.5,8.5,0,0,1-3.1-.6A8,8,0,0,1,16,152V80a8,8,0,0,1,8-8H96a8,8,0,0,1,7.4,4.9,8.4,8.4,0,0,1-1.7,8.8L71.3,116,136,180.7l90.3-90.4a8.1,8.1,0,0,1,11.4,11.4Z" }, null, -1), C = [
  z
], A = { key: 3 }, B = /* @__PURE__ */ n("path", { d: "M236.2,100.2l-96,96a5.8,5.8,0,0,1-8.4,0L30,94.5V152a6,6,0,0,1-12,0V80a6,6,0,0,1,6-6H96a6,6,0,0,1,0,12H38.5L136,183.5l91.8-91.7a5.9,5.9,0,0,1,8.4,8.4Z" }, null, -1), b = [
  B
], E = { key: 4 }, N = /* @__PURE__ */ n("path", { d: "M237.7,101.7l-96,96a8.2,8.2,0,0,1-11.4,0L32,99.3V152a8,8,0,0,1-16,0V80a8,8,0,0,1,8-8H96a8,8,0,0,1,0,16H43.3L136,180.7l90.3-90.4a8.1,8.1,0,0,1,11.4,11.4Z" }, null, -1), P = [
  N
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M234.8,98.8l-96,96a3.9,3.9,0,0,1-5.6,0L28,89.7V152a4,4,0,0,1-8,0V80a4,4,0,0,1,4-4H96a4,4,0,0,1,0,8H33.7L136,186.3l93.2-93.1a4,4,0,1,1,5.6,5.6Z" }, null, -1), j = [
  $
], q = {
  name: "PhArrowElbowLeft"
}, G = /* @__PURE__ */ f({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const r = c, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), s = l(() => r.weight ?? _), a = l(() => r.size ?? h), m = l(() => r.color ?? p), u = l(() => r.mirrored !== void 0 ? r.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, D) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      w(d.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", H, M)) : t(s) === "duotone" ? (o(), e("g", v, S)) : t(s) === "fill" ? (o(), e("g", Z, C)) : t(s) === "light" ? (o(), e("g", A, b)) : t(s) === "regular" ? (o(), e("g", E, P)) : t(s) === "thin" ? (o(), e("g", W, j)) : L("", !0)
    ], 16, V));
  }
});
export {
  G as default
};
