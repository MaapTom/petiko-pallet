import { defineComponent as y, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as w, createCommentVNode as L, createElementVNode as s } from "vue";
const M = ["width", "height", "fill", "transform"], k = { key: 0 }, Z = /* @__PURE__ */ s("path", { d: "M241.7,135l-52,72a11.9,11.9,0,0,1-19.4,0L76,76.5,33.7,135a12,12,0,1,1-19.4-14l52-72a11.9,11.9,0,0,1,19.4,0L180,179.5,222.3,121a12,12,0,0,1,19.4,14Z" }, null, -1), v = [
  Z
], x = { key: 1 }, S = /* @__PURE__ */ s("path", {
  d: "M76,56l52,72H24Zm156,72H128l52,72Z",
  opacity: "0.2"
}, null, -1), z = /* @__PURE__ */ s("path", { d: "M238.5,132.7l-52,72a8.1,8.1,0,0,1-13,0L76,69.7l-45.5,63a8,8,0,1,1-13-9.4l52-72a8.1,8.1,0,0,1,13,0l97.5,135,45.5-63a8,8,0,0,1,13,9.4Z" }, null, -1), C = [
  S,
  z
], B = { key: 2 }, N = /* @__PURE__ */ s("path", { d: "M238.5,132.7l-52,72a8.1,8.1,0,0,1-13,0L76,69.7l-45.5,63a8,8,0,1,1-13-9.4l52-72a8.1,8.1,0,0,1,13,0l97.5,135,45.5-63a8,8,0,0,1,13,9.4Z" }, null, -1), W = [
  N
], b = { key: 3 }, E = /* @__PURE__ */ s("path", { d: "M236.9,131.5l-52,72a6.1,6.1,0,0,1-9.8,0L76,66.2,28.9,131.5a6,6,0,1,1-9.8-7l52-72a6.1,6.1,0,0,1,9.8,0L180,189.8l47.1-65.3a6,6,0,0,1,9.8,7Z" }, null, -1), H = [
  E
], P = { key: 4 }, V = /* @__PURE__ */ s("path", { d: "M238.5,132.7l-52,72a8.1,8.1,0,0,1-13,0L76,69.7l-45.5,63a8,8,0,1,1-13-9.4l52-72a8.1,8.1,0,0,1,13,0l97.5,135,45.5-63a8,8,0,0,1,13,9.4Z" }, null, -1), $ = [
  V
], j = { key: 5 }, T = /* @__PURE__ */ s("path", { d: "M235.2,130.3l-52,72a3.9,3.9,0,0,1-6.4,0L76,62.8,27.2,130.3a3.9,3.9,0,1,1-6.4-4.6l52-72a3.9,3.9,0,0,1,6.4,0L180,193.2l48.8-67.5a3.9,3.9,0,0,1,6.4,4.6Z" }, null, -1), q = [
  T
], A = {
  name: "PhWaveTriangle"
}, G = /* @__PURE__ */ y({
  ...A,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const n = c, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), l = r(() => n.weight ?? _), a = r(() => n.size ?? h), m = r(() => n.color ?? p), u = r(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, D) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      w(d.$slots, "default"),
      t(l) === "bold" ? (o(), e("g", k, v)) : t(l) === "duotone" ? (o(), e("g", x, C)) : t(l) === "fill" ? (o(), e("g", B, W)) : t(l) === "light" ? (o(), e("g", b, H)) : t(l) === "regular" ? (o(), e("g", P, $)) : t(l) === "thin" ? (o(), e("g", j, q)) : L("", !0)
    ], 16, M));
  }
});
export {
  G as default
};
