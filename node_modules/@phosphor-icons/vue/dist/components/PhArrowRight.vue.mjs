import { defineComponent as y, inject as r, computed as l, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as w, createCommentVNode as H, createElementVNode as n } from "vue";
const L = ["width", "height", "fill", "transform"], A = { key: 0 }, k = /* @__PURE__ */ n("path", { d: "M224.5,136.5l-72,72a12.1,12.1,0,0,1-17,0,12,12,0,0,1,0-17L187,140H40a12,12,0,0,1,0-24H187L135.5,64.5a12,12,0,0,1,17-17l72,72A12,12,0,0,1,224.5,136.5Z" }, null, -1), M = [
  k
], v = { key: 1 }, x = /* @__PURE__ */ n("path", { d: "M221.7,133.7l-72,72a8.2,8.2,0,0,1-11.4,0,8.1,8.1,0,0,1,0-11.4L196.7,136H40a8,8,0,0,1,0-16H196.7L138.3,61.7a8.1,8.1,0,0,1,11.4-11.4l72,72A8.1,8.1,0,0,1,221.7,133.7Z" }, null, -1), S = [
  x
], Z = { key: 2 }, z = /* @__PURE__ */ n("path", { d: "M221.7,133.7l-72,72A8.3,8.3,0,0,1,144,208a8.5,8.5,0,0,1-3.1-.6A8,8,0,0,1,136,200V136H40a8,8,0,0,1,0-16h96V56a8,8,0,0,1,4.9-7.4,8.4,8.4,0,0,1,8.8,1.7l72,72A8.1,8.1,0,0,1,221.7,133.7Z" }, null, -1), C = [
  z
], B = { key: 3 }, V = /* @__PURE__ */ n("path", { d: "M220.2,132.2l-72,72a5.9,5.9,0,0,1-8.4-8.4L201.5,134H40a6,6,0,0,1,0-12H201.5L139.8,60.2a5.9,5.9,0,0,1,8.4-8.4l72,72A5.8,5.8,0,0,1,220.2,132.2Z" }, null, -1), N = [
  V
], b = { key: 4 }, E = /* @__PURE__ */ n("path", { d: "M221.7,133.7l-72,72a8.2,8.2,0,0,1-11.4,0,8.1,8.1,0,0,1,0-11.4L196.7,136H40a8,8,0,0,1,0-16H196.7L138.3,61.7a8.1,8.1,0,0,1,11.4-11.4l72,72A8.1,8.1,0,0,1,221.7,133.7Z" }, null, -1), P = [
  E
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M218.8,130.8l-72,72a3.9,3.9,0,0,1-5.6,0,3.9,3.9,0,0,1,0-5.6L206.3,132H40a4,4,0,0,1,0-8H206.3L141.2,58.8a4,4,0,0,1,5.6-5.6l72,72A3.9,3.9,0,0,1,218.8,130.8Z" }, null, -1), j = [
  $
], R = {
  name: "PhArrowRight"
}, F = /* @__PURE__ */ y({
  ...R,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(a) {
    const i = a, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), s = l(() => i.weight ?? _), d = l(() => i.size ?? h), m = l(() => i.color ?? p), u = l(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (c, q) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(m),
      transform: t(u)
    }, c.$attrs), [
      w(c.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", A, M)) : t(s) === "duotone" ? (o(), e("g", v, S)) : t(s) === "fill" ? (o(), e("g", Z, C)) : t(s) === "light" ? (o(), e("g", B, N)) : t(s) === "regular" ? (o(), e("g", b, P)) : t(s) === "thin" ? (o(), e("g", W, j)) : H("", !0)
    ], 16, L));
  }
});
export {
  F as default
};
