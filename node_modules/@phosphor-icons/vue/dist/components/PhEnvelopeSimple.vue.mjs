import { defineComponent as u, inject as r, computed as l, openBlock as o, createElementBlock as e, mergeProps as M, unref as t, renderSlot as Z, createCommentVNode as H, createElementVNode as s } from "vue";
const y = ["width", "height", "fill", "transform"], f = { key: 0 }, w = /* @__PURE__ */ s("path", { d: "M224,44H32A12,12,0,0,0,20,56V192a20.1,20.1,0,0,0,20,20H216a20.1,20.1,0,0,0,20-20V56A12,12,0,0,0,224,44ZM193.2,68,128,127.7,62.8,68ZM44,188V83.3l75.9,69.5a11.9,11.9,0,0,0,16.2,0L212,83.3V188Z" }, null, -1), A = [
  w
], k = { key: 1 }, L = /* @__PURE__ */ s("path", {
  d: "M224,56l-96,88L32,56Z",
  opacity: "0.2"
}, null, -1), v = /* @__PURE__ */ s("path", { d: "M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48ZM203.4,64,128,133.1,52.6,64ZM216,192H40V74.2l82.6,75.7a8,8,0,0,0,10.8,0L216,74.2V192Z" }, null, -1), S = [
  L,
  v
], x = { key: 2 }, z = /* @__PURE__ */ s("path", { d: "M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48Zm-8,144H40V74.2l82.6,75.7a8,8,0,0,0,10.8,0L216,74.2V192Z" }, null, -1), C = [
  z
], B = { key: 3 }, E = /* @__PURE__ */ s("path", { d: "M224,50H32a6,6,0,0,0-6,6V192a14,14,0,0,0,14,14H216a14,14,0,0,0,14-14V56A6,6,0,0,0,224,50ZM208.6,62,128,135.9,47.4,62ZM216,194H40a2,2,0,0,1-2-2V69.6l85.9,78.8a6.1,6.1,0,0,0,8.2,0L218,69.6V192A2,2,0,0,1,216,194Z" }, null, -1), N = [
  E
], b = { key: 4 }, P = /* @__PURE__ */ s("path", { d: "M224,48H32a8,8,0,0,0-8,8V192a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A8,8,0,0,0,224,48ZM203.4,64,128,133.1,52.6,64ZM216,192H40V74.2l82.6,75.7a8,8,0,0,0,10.8,0L216,74.2V192Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ s("path", { d: "M224,52H32a4,4,0,0,0-4,4V192a12,12,0,0,0,12,12H216a12,12,0,0,0,12-12V56A4,4,0,0,0,224,52Zm-10.3,8L128,138.6,42.3,60ZM216,196H40a4,4,0,0,1-4-4V65.1l89.3,81.8a3.9,3.9,0,0,0,5.4,0L220,65.1V192A4,4,0,0,1,216,196Z" }, null, -1), q = [
  j
], D = {
  name: "PhEnvelopeSimple"
}, I = /* @__PURE__ */ u({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const i = c, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), V = r("mirrored", !1), n = l(() => i.weight ?? _), a = l(() => i.size ?? h), g = l(() => i.color ?? p), m = l(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : V ? "scale(-1, 1)" : void 0);
    return (d, F) => (o(), e("svg", M({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(g),
      transform: t(m)
    }, d.$attrs), [
      Z(d.$slots, "default"),
      t(n) === "bold" ? (o(), e("g", f, A)) : t(n) === "duotone" ? (o(), e("g", k, S)) : t(n) === "fill" ? (o(), e("g", x, C)) : t(n) === "light" ? (o(), e("g", B, N)) : t(n) === "regular" ? (o(), e("g", b, W)) : t(n) === "thin" ? (o(), e("g", $, q)) : H("", !0)
    ], 16, y));
  }
});
export {
  I as default
};
