import { defineComponent as Z, inject as r, computed as n, openBlock as e, createElementBlock as o, mergeProps as u, unref as t, renderSlot as y, createCommentVNode as f, createElementVNode as i, createStaticVNode as M } from "vue";
const w = ["width", "height", "fill", "transform"], k = { key: 0 }, x = /* @__PURE__ */ i("path", { d: "M108,108A16,16,0,1,1,92,92,16,16,0,0,1,108,108Zm56-16a16,16,0,1,0,16,16A16,16,0,0,0,164,92Zm72,36A108,108,0,1,1,128,20,108.1,108.1,0,0,1,236,128Zm-24,0a84,84,0,1,0-84,84A84.1,84.1,0,0,0,212,128Z" }, null, -1), S = [
  x
], v = { key: 1 }, z = /* @__PURE__ */ M('<g opacity="0.2"><circle cx="128" cy="128" r="96"></circle></g><circle cx="92" cy="108" r="12"></circle><circle cx="164" cy="108" r="12"></circle><path d="M128,24A104,104,0,1,0,232,128,104.2,104.2,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216Z"></path>', 4), B = [
  z
], C = { key: 2 }, N = /* @__PURE__ */ i("path", { d: "M128,24A104,104,0,1,0,232,128,104.2,104.2,0,0,0,128,24ZM92,120a12,12,0,1,1,12-12A12,12,0,0,1,92,120Zm72,0a12,12,0,1,1,12-12A12,12,0,0,1,164,120Z" }, null, -1), V = [
  N
], b = { key: 3 }, E = /* @__PURE__ */ i("path", { d: "M128,26A102,102,0,1,0,230,128,102.2,102.2,0,0,0,128,26Zm0,192a90,90,0,1,1,90-90A90.1,90.1,0,0,1,128,218ZM102,108A10,10,0,1,1,92,98,10,10,0,0,1,102,108Zm72,0a10,10,0,1,1-10-10A10,10,0,0,1,174,108Z" }, null, -1), P = [
  E
], W = { key: 4 }, $ = /* @__PURE__ */ i("path", { d: "M104,108A12,12,0,1,1,92,96,12,12,0,0,1,104,108Zm60-12a12,12,0,1,0,12,12A12,12,0,0,0,164,96Zm68,32A104,104,0,1,1,128,24,104.2,104.2,0,0,1,232,128Zm-16,0a88,88,0,1,0-88,88A88.1,88.1,0,0,0,216,128Z" }, null, -1), j = [
  $
], q = { key: 5 }, D = /* @__PURE__ */ i("path", { d: "M128,28A100,100,0,1,0,228,128,100.2,100.2,0,0,0,128,28Zm0,192a92,92,0,1,1,92-92A92.1,92.1,0,0,1,128,220ZM100,108a8,8,0,1,1-8-8A8,8,0,0,1,100,108Zm72,0a8,8,0,1,1-8-8A8,8,0,0,1,172,108Z" }, null, -1), F = [
  D
], G = {
  name: "PhSmileyBlank"
}, J = /* @__PURE__ */ Z({
  ...G,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(a) {
    const c = a, _ = r("weight", "regular"), h = r("size", "1em"), m = r("color", "currentColor"), p = r("mirrored", !1), s = n(() => c.weight ?? _), l = n(() => c.size ?? h), g = n(() => c.color ?? m), A = n(() => c.mirrored !== void 0 ? c.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (d, H) => (e(), o("svg", u({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(l),
      height: t(l),
      fill: t(g),
      transform: t(A)
    }, d.$attrs), [
      y(d.$slots, "default"),
      t(s) === "bold" ? (e(), o("g", k, S)) : t(s) === "duotone" ? (e(), o("g", v, B)) : t(s) === "fill" ? (e(), o("g", C, V)) : t(s) === "light" ? (e(), o("g", b, P)) : t(s) === "regular" ? (e(), o("g", W, j)) : t(s) === "thin" ? (e(), o("g", q, F)) : f("", !0)
    ], 16, w));
  }
});
export {
  J as default
};
