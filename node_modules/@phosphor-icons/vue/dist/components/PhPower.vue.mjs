import { defineComponent as y, inject as r, computed as d, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as Z, createCommentVNode as v, createElementVNode as n } from "vue";
const w = ["width", "height", "fill", "transform"], k = { key: 0 }, M = /* @__PURE__ */ n("path", { d: "M116,124V48a12,12,0,0,1,24,0v76a12,12,0,0,1-24,0Zm66.6-79.8a12,12,0,0,0-13.2,20.1,76,76,0,1,1-82.8,0A12,12,0,1,0,73.4,44.2a100,100,0,1,0,109.2,0Z" }, null, -1), V = [
  M
], x = { key: 1 }, S = /* @__PURE__ */ n("path", { d: "M120,124V48a8,8,0,0,1,16,0v76a8,8,0,0,1-16,0Zm60.4-76.5a8.1,8.1,0,0,0-11.1,2.4,7.9,7.9,0,0,0,2.3,11,80,80,0,1,1-87.2,0,7.9,7.9,0,0,0,2.3-11,8.1,8.1,0,0,0-11.1-2.4,96,96,0,1,0,104.8,0Z" }, null, -1), z = [
  S
], A = { key: 2 }, C = /* @__PURE__ */ n("path", { d: "M128,24A104,104,0,1,0,232,128,104.2,104.2,0,0,0,128,24Zm-8,32a8,8,0,0,1,16,0v60a8,8,0,0,1-16,0Zm8,152A80,80,0,0,1,83.5,61.5a8,8,0,0,1,11.1,2.2,7.9,7.9,0,0,1-2.2,11.1,64.1,64.1,0,1,0,71.1,0,8,8,0,0,1,8.9-13.3A80,80,0,0,1,128,208Z" }, null, -1), B = [
  C
], N = { key: 3 }, P = /* @__PURE__ */ n("path", { d: "M122,124V48a6,6,0,0,1,12,0v76a6,6,0,0,1-12,0Zm57.3-74.8A6,6,0,0,0,171,51a6.1,6.1,0,0,0,1.7,8.3,82,82,0,1,1-89.4,0,6,6,0,0,0-6.6-10.1,94,94,0,1,0,102.6,0Z" }, null, -1), b = [
  P
], E = { key: 4 }, W = /* @__PURE__ */ n("path", { d: "M120,124V48a8,8,0,0,1,16,0v76a8,8,0,0,1-16,0Zm60.4-76.5a8.1,8.1,0,0,0-11.1,2.4,7.9,7.9,0,0,0,2.3,11,80,80,0,1,1-87.2,0,7.9,7.9,0,0,0,2.3-11,8.1,8.1,0,0,0-11.1-2.4,96,96,0,1,0,104.8,0Z" }, null, -1), $ = [
  W
], j = { key: 5 }, q = /* @__PURE__ */ n("path", { d: "M124,124V48a4,4,0,0,1,8,0v76a4,4,0,0,1-8,0Zm54.2-73.1a4,4,0,0,0-4.4,6.7,84,84,0,1,1-91.6,0,4,4,0,1,0-4.4-6.7,92,92,0,1,0,100.4,0Z" }, null, -1), D = [
  q
], F = {
  name: "PhPower"
}, I = /* @__PURE__ */ y({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = r("weight", "regular"), h = r("size", "1em"), m = r("color", "currentColor"), p = r("mirrored", !1), s = d(() => i.weight ?? _), c = d(() => i.size ?? h), g = d(() => i.color ?? m), u = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (a, G) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(g),
      transform: t(u)
    }, a.$attrs), [
      Z(a.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", k, V)) : t(s) === "duotone" ? (o(), e("g", x, z)) : t(s) === "fill" ? (o(), e("g", A, B)) : t(s) === "light" ? (o(), e("g", N, b)) : t(s) === "regular" ? (o(), e("g", E, $)) : t(s) === "thin" ? (o(), e("g", j, D)) : v("", !0)
    ], 16, w));
  }
});
export {
  I as default
};
