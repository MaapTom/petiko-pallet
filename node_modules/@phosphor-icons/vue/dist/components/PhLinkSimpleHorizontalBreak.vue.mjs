import { defineComponent as u, inject as h, computed as i, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as M, createCommentVNode as f, createElementVNode as s } from "vue";
const A = ["width", "height", "fill", "transform"], Z = { key: 0 }, k = /* @__PURE__ */ s("path", { d: "M28,128a36,36,0,0,0,36,36h40a12,12,0,0,1,0,24H64A60,60,0,0,1,64,68h40a12,12,0,0,1,0,24H64A36,36,0,0,0,28,128ZM192,68H152a12,12,0,0,0,0,24h40a36,36,0,0,1,0,72H152a12,12,0,0,0,0,24h40a60,60,0,0,0,0-120Z" }, null, -1), w = [
  k
], S = { key: 1 }, v = /* @__PURE__ */ s("path", { d: "M24,128a40,40,0,0,0,40,40h40a8,8,0,0,1,0,16H64A56,56,0,0,1,64,72h40a8,8,0,0,1,0,16H64A40,40,0,0,0,24,128ZM192,72H152a8,8,0,0,0,0,16h40a40,40,0,0,1,0,80H152a8,8,0,0,0,0,16h40a56,56,0,0,0,0-112Z" }, null, -1), x = [
  v
], z = { key: 2 }, B = /* @__PURE__ */ s("path", { d: "M112,176a8,8,0,0,1-8,8H64A56,56,0,0,1,64,72h40a8,8,0,0,1,0,16H64a40,40,0,0,0,0,80h40A8,8,0,0,1,112,176ZM192,72H152a8,8,0,0,0,0,16h40a40,40,0,0,1,0,80H152a8,8,0,0,0,0,16h40a56,56,0,0,0,0-112Z" }, null, -1), C = [
  B
], N = { key: 3 }, b = /* @__PURE__ */ s("path", { d: "M22,128a42,42,0,0,0,42,42h40a6,6,0,0,1,0,12H64A54,54,0,0,1,64,74h40a6,6,0,0,1,0,12H64A42,42,0,0,0,22,128ZM192,74H152a6,6,0,0,0,0,12h40a42,42,0,0,1,0,84H152a6,6,0,0,0,0,12h40a54,54,0,0,0,0-108Z" }, null, -1), E = [
  b
], P = { key: 4 }, V = /* @__PURE__ */ s("path", { d: "M24,128a40,40,0,0,0,40,40h40a8,8,0,0,1,0,16H64A56,56,0,0,1,64,72h40a8,8,0,0,1,0,16H64A40,40,0,0,0,24,128ZM192,72H152a8,8,0,0,0,0,16h40a40,40,0,0,1,0,80H152a8,8,0,0,0,0,16h40a56,56,0,0,0,0-112Z" }, null, -1), W = [
  V
], $ = { key: 5 }, j = /* @__PURE__ */ s("path", { d: "M20,128a44,44,0,0,0,44,44h40a4,4,0,0,1,0,8H64A52,52,0,0,1,64,76h40a4,4,0,0,1,0,8H64A44,44,0,0,0,20,128ZM192,76H152a4,4,0,0,0,0,8h40a44,44,0,0,1,0,88H152a4,4,0,0,0,0,8h40a52,52,0,0,0,0-104Z" }, null, -1), L = [
  j
], q = {
  name: "PhLinkSimpleHorizontalBreak"
}, G = /* @__PURE__ */ u({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const n = c, l = h("weight", "regular"), _ = h("size", "1em"), p = h("color", "currentColor"), H = h("mirrored", !1), a = i(() => n.weight ?? l), r = i(() => n.size ?? _), g = i(() => n.color ?? p), m = i(() => n.mirrored !== void 0 ? n.mirrored ? "scale(-1, 1)" : void 0 : H ? "scale(-1, 1)" : void 0);
    return (d, D) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(r),
      height: t(r),
      fill: t(g),
      transform: t(m)
    }, d.$attrs), [
      M(d.$slots, "default"),
      t(a) === "bold" ? (o(), e("g", Z, w)) : t(a) === "duotone" ? (o(), e("g", S, x)) : t(a) === "fill" ? (o(), e("g", z, C)) : t(a) === "light" ? (o(), e("g", N, E)) : t(a) === "regular" ? (o(), e("g", P, W)) : t(a) === "thin" ? (o(), e("g", $, L)) : f("", !0)
    ], 16, A));
  }
});
export {
  G as default
};
