import { defineComponent as f, inject as r, computed as i, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as w, createCommentVNode as H, createElementVNode as n } from "vue";
const k = ["width", "height", "fill", "transform"], v = { key: 0 }, A = /* @__PURE__ */ n("path", { d: "M228,128a12,12,0,0,1-12,12H69l51.5,51.5a12,12,0,0,1,0,17,12.1,12.1,0,0,1-17,0l-72-72a12,12,0,0,1,0-17l72-72a12,12,0,0,1,17,17L69,116H216A12,12,0,0,1,228,128Z" }, null, -1), M = [
  A
], x = { key: 1 }, L = /* @__PURE__ */ n("path", { d: "M224,128a8,8,0,0,1-8,8H59.3l58.4,58.3a8.1,8.1,0,0,1,0,11.4,8.2,8.2,0,0,1-11.4,0l-72-72a8.1,8.1,0,0,1,0-11.4l72-72a8.1,8.1,0,0,1,11.4,11.4L59.3,120H216A8,8,0,0,1,224,128Z" }, null, -1), S = [
  L
], Z = { key: 2 }, z = /* @__PURE__ */ n("path", { d: "M224,128a8,8,0,0,1-8,8H120v64a8,8,0,0,1-4.9,7.4,8.5,8.5,0,0,1-3.1.6,8.3,8.3,0,0,1-5.7-2.3l-72-72a8.1,8.1,0,0,1,0-11.4l72-72a8.4,8.4,0,0,1,8.8-1.7A8,8,0,0,1,120,56v64h96A8,8,0,0,1,224,128Z" }, null, -1), C = [
  z
], B = { key: 3 }, N = /* @__PURE__ */ n("path", { d: "M222,128a6,6,0,0,1-6,6H54.5l61.7,61.8a5.9,5.9,0,1,1-8.4,8.4l-72-72a5.8,5.8,0,0,1,0-8.4l72-72a5.9,5.9,0,0,1,8.4,8.4L54.5,122H216A6,6,0,0,1,222,128Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ n("path", { d: "M224,128a8,8,0,0,1-8,8H59.3l58.4,58.3a8.1,8.1,0,0,1,0,11.4,8.2,8.2,0,0,1-11.4,0l-72-72a8.1,8.1,0,0,1,0-11.4l72-72a8.1,8.1,0,0,1,11.4,11.4L59.3,120H216A8,8,0,0,1,224,128Z" }, null, -1), V = [
  P
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M220,128a4,4,0,0,1-4,4H49.7l65.1,65.2a3.9,3.9,0,0,1,0,5.6,3.9,3.9,0,0,1-5.6,0l-72-72a3.9,3.9,0,0,1,0-5.6l72-72a4,4,0,0,1,5.6,5.6L49.7,124H216A4,4,0,0,1,220,128Z" }, null, -1), j = [
  $
], q = {
  name: "PhArrowLeft"
}, G = /* @__PURE__ */ f({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const l = c, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), s = i(() => l.weight ?? _), a = i(() => l.size ?? h), m = i(() => l.color ?? p), u = i(() => l.mirrored !== void 0 ? l.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, D) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      w(d.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", v, M)) : t(s) === "duotone" ? (o(), e("g", x, S)) : t(s) === "fill" ? (o(), e("g", Z, C)) : t(s) === "light" ? (o(), e("g", B, b)) : t(s) === "regular" ? (o(), e("g", E, V)) : t(s) === "thin" ? (o(), e("g", W, j)) : H("", !0)
    ], 16, k));
  }
});
export {
  G as default
};
