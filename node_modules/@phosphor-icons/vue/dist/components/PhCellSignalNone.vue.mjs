import { defineComponent as A, inject as r, computed as d, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as V, createCommentVNode as f, createElementVNode as n } from "vue";
const H = ["width", "height", "fill", "transform"], M = { key: 0 }, Z = /* @__PURE__ */ n("path", { d: "M192,228H27.3a20,20,0,0,1-14.1-34.2L177.9,29.2A19.9,19.9,0,0,1,212,43.3V208A20.1,20.1,0,0,1,192,228ZM37,204H188V53Z" }, null, -1), L = [
  Z
], w = { key: 1 }, k = /* @__PURE__ */ n("path", { d: "M192,224H27.3A16,16,0,0,1,16,196.7L180.7,32A16,16,0,0,1,208,43.3V208A16,16,0,0,1,192,224ZM27.3,208H192V43.3L27.3,208Z" }, null, -1), S = [
  k
], v = { key: 2 }, x = /* @__PURE__ */ n("path", { d: "M192,224H27.3A16,16,0,0,1,16,196.7L180.7,32A16,16,0,0,1,208,43.3V208A16,16,0,0,1,192,224ZM27.3,208H192V43.3L27.3,208Z" }, null, -1), C = [
  x
], z = { key: 3 }, B = /* @__PURE__ */ n("path", { d: "M192,222H27.3a14,14,0,0,1-9.9-23.9L182.1,33.4A14,14,0,0,1,206,43.3V208A14,14,0,0,1,192,222Zm0-180.7a1.8,1.8,0,0,0-1.4.6L25.9,206.6a1.9,1.9,0,0,0-.4,2.2,2,2,0,0,0,1.8,1.2H192a2,2,0,0,0,2-2V43.3a1.8,1.8,0,0,0-1.2-1.8Z" }, null, -1), N = [
  B
], b = { key: 4 }, E = /* @__PURE__ */ n("path", { d: "M192,224H27.3A16,16,0,0,1,16,196.7L180.7,32A16,16,0,0,1,208,43.3V208A16,16,0,0,1,192,224ZM27.3,208H192V43.3L27.3,208Z" }, null, -1), P = [
  E
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M192,220H27.3a12,12,0,0,1-8.5-20.5L183.5,34.8A12,12,0,0,1,204,43.3V208A12,12,0,0,1,192,220Zm-.1-180.7a3.4,3.4,0,0,0-2.7,1.2L24.5,205.2a3.8,3.8,0,0,0-.9,4.3,4,4,0,0,0,3.7,2.5H192a4,4,0,0,0,4-4V43.3a3.8,3.8,0,0,0-2.5-3.7A4,4,0,0,0,191.9,39.3Z" }, null, -1), j = [
  $
], q = {
  name: "PhCellSignalNone"
}, G = /* @__PURE__ */ A({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(_) {
    const i = _, a = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), s = d(() => i.weight ?? a), c = d(() => i.size ?? h), m = d(() => i.color ?? p), u = d(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (l, D) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(m),
      transform: t(u)
    }, l.$attrs), [
      V(l.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", M, L)) : t(s) === "duotone" ? (o(), e("g", w, S)) : t(s) === "fill" ? (o(), e("g", v, C)) : t(s) === "light" ? (o(), e("g", z, N)) : t(s) === "regular" ? (o(), e("g", b, P)) : t(s) === "thin" ? (o(), e("g", W, j)) : f("", !0)
    ], 16, H));
  }
});
export {
  G as default
};
