import { defineComponent as y, inject as l, computed as r, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as M, createCommentVNode as Z, createElementVNode as n } from "vue";
const w = ["width", "height", "fill", "transform"], k = { key: 0 }, v = /* @__PURE__ */ n("path", { d: "M120,137,48,201a12.1,12.1,0,0,1-17-1,12.1,12.1,0,0,1,1-17l61.9-55L32,73A12,12,0,1,1,48,55l72,64a12.1,12.1,0,0,1,0,18Zm96,43H120a12,12,0,0,0,0,24h96a12,12,0,0,0,0-24Z" }, null, -1), x = [
  v
], H = { key: 1 }, L = /* @__PURE__ */ n("path", { d: "M117.3,134l-72,64a8.1,8.1,0,0,1-5.3,2,8,8,0,0,1-5.3-14L100,128,34.7,70A8,8,0,1,1,45.3,58l72,64a8,8,0,0,1,0,12ZM216,184H120a8,8,0,0,0,0,16h96a8,8,0,0,0,0-16Z" }, null, -1), S = [
  L
], z = { key: 2 }, A = /* @__PURE__ */ n("path", { d: "M117.3,134l-72,64a8.1,8.1,0,0,1-5.3,2,8,8,0,0,1-5.3-14L100,128,34.7,70A8,8,0,1,1,45.3,58l72,64a8,8,0,0,1,0,12ZM216,184H120a8,8,0,0,0,0,16h96a8,8,0,0,0,0-16Z" }, null, -1), C = [
  A
], B = { key: 3 }, N = /* @__PURE__ */ n("path", { d: "M116,132.5l-72,64a6.1,6.1,0,0,1-8.5-.5,6,6,0,0,1,.5-8.5L103,128,36,68.5a6,6,0,1,1,8-9l72,64a6.1,6.1,0,0,1,0,9ZM216,186H120a6,6,0,0,0,0,12h96a6,6,0,0,0,0-12Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ n("path", { d: "M117.3,134l-72,64a8.1,8.1,0,0,1-5.3,2,8,8,0,0,1-5.3-14L100,128,34.7,70A8,8,0,1,1,45.3,58l72,64a8,8,0,0,1,0,12ZM216,184H120a8,8,0,0,0,0,16h96a8,8,0,0,0,0-16Z" }, null, -1), V = [
  P
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M116,128a4.3,4.3,0,0,1-1.3,3l-72,64a3.9,3.9,0,0,1-2.7,1,4.3,4.3,0,0,1-3-1.3,4.1,4.1,0,0,1,.3-5.7L106,128,37.3,67a4,4,0,1,1,5.4-6l72,64A4.3,4.3,0,0,1,116,128Zm100,60H120a4,4,0,0,0,0,8h96a4,4,0,0,0,0-8Z" }, null, -1), j = [
  $
], T = {
  name: "PhTerminal"
}, F = /* @__PURE__ */ y({
  ...T,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const i = c, h = l("weight", "regular"), _ = l("size", "1em"), p = l("color", "currentColor"), g = l("mirrored", !1), s = r(() => i.weight ?? h), a = r(() => i.size ?? _), m = r(() => i.color ?? p), u = r(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, q) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      M(d.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", k, x)) : t(s) === "duotone" ? (o(), e("g", H, S)) : t(s) === "fill" ? (o(), e("g", z, C)) : t(s) === "light" ? (o(), e("g", B, b)) : t(s) === "regular" ? (o(), e("g", E, V)) : t(s) === "thin" ? (o(), e("g", W, j)) : Z("", !0)
    ], 16, w));
  }
});
export {
  F as default
};
