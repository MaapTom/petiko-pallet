import { defineComponent as y, inject as l, computed as r, openBlock as e, createElementBlock as s, mergeProps as f, unref as t, renderSlot as w, createCommentVNode as M, createElementVNode as o } from "vue";
const k = ["width", "height", "fill", "transform"], A = { key: 0 }, Z = /* @__PURE__ */ o("path", { d: "M208,172a12.2,12.2,0,0,1-8.5-3.5L128,97,56.5,168.5a12,12,0,0,1-17-17l80-80a12,12,0,0,1,17,0l80,80a12,12,0,0,1,0,17A12.2,12.2,0,0,1,208,172Z" }, null, -1), v = [
  Z
], x = { key: 1 }, C = /* @__PURE__ */ o("g", { opacity: "0.2" }, [
  /* @__PURE__ */ o("polygon", { points: "48 160 128 80 208 160 48 160" })
], -1), S = /* @__PURE__ */ o("path", { d: "M208,168H48a8,8,0,0,1-7.4-4.9,8.4,8.4,0,0,1,1.7-8.8l80-80a8.1,8.1,0,0,1,11.4,0l80,80a8.4,8.4,0,0,1,1.7,8.8A8,8,0,0,1,208,168ZM67.3,152H188.7L128,91.3Z" }, null, -1), z = [
  C,
  S
], L = { key: 2 }, B = /* @__PURE__ */ o("path", { d: "M215.4,163.1A8,8,0,0,1,208,168H48a8,8,0,0,1-7.4-4.9,8.4,8.4,0,0,1,1.7-8.8l80-80a8.1,8.1,0,0,1,11.4,0l80,80A8.4,8.4,0,0,1,215.4,163.1Z" }, null, -1), H = [
  B
], N = { key: 3 }, b = /* @__PURE__ */ o("path", { d: "M208,166a5.8,5.8,0,0,1-4.2-1.8L128,88.5,52.2,164.2a5.9,5.9,0,0,1-8.4-8.4l80-80a5.8,5.8,0,0,1,8.4,0l80,80A6,6,0,0,1,208,166Z" }, null, -1), E = [
  b
], P = { key: 4 }, V = /* @__PURE__ */ o("path", { d: "M208,168a8.5,8.5,0,0,1-5.7-2.3L128,91.3,53.7,165.7a8.1,8.1,0,0,1-11.4-11.4l80-80a8.1,8.1,0,0,1,11.4,0l80,80a8.1,8.1,0,0,1,0,11.4A8.5,8.5,0,0,1,208,168Z" }, null, -1), W = [
  V
], $ = { key: 5 }, j = /* @__PURE__ */ o("path", { d: "M208,164a3.9,3.9,0,0,1-2.8-1.2L128,85.7,50.8,162.8a4,4,0,0,1-5.6-5.6l80-80a3.9,3.9,0,0,1,5.6,0l80,80a3.9,3.9,0,0,1,0,5.6A3.9,3.9,0,0,1,208,164Z" }, null, -1), U = [
  j
], q = {
  name: "PhCaretUp"
}, G = /* @__PURE__ */ y({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(d) {
    const i = d, _ = l("weight", "regular"), h = l("size", "1em"), p = l("color", "currentColor"), g = l("mirrored", !1), n = r(() => i.weight ?? _), a = r(() => i.size ?? h), m = r(() => i.color ?? p), u = r(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (c, D) => (e(), s("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(m),
      transform: t(u)
    }, c.$attrs), [
      w(c.$slots, "default"),
      t(n) === "bold" ? (e(), s("g", A, v)) : t(n) === "duotone" ? (e(), s("g", x, z)) : t(n) === "fill" ? (e(), s("g", L, H)) : t(n) === "light" ? (e(), s("g", N, E)) : t(n) === "regular" ? (e(), s("g", P, W)) : t(n) === "thin" ? (e(), s("g", $, U)) : M("", !0)
    ], 16, k));
  }
});
export {
  G as default
};
