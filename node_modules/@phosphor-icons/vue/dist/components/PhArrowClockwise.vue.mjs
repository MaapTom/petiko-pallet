import { defineComponent as y, inject as r, computed as l, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as v, createCommentVNode as w, createElementVNode as n } from "vue";
const k = ["width", "height", "fill", "transform"], M = { key: 0 }, x = /* @__PURE__ */ n("path", { d: "M236.2,51.7v48a12,12,0,0,1-12,12h-48a12,12,0,0,1,0-24h19L181.7,74.3a75.9,75.9,0,1,0,0,107.4,12.2,12.2,0,0,1,17,0,12,12,0,0,1,0,17,100,100,0,1,1,0-141.4l13.5,13.4v-19a12,12,0,1,1,24,0Z" }, null, -1), C = [
  x
], S = { key: 1 }, V = /* @__PURE__ */ n("path", { d: "M232.2,51.7v48a8,8,0,0,1-8,8h-48a8,8,0,0,1,0-16h28.7L184.6,71.4a80,80,0,1,0,0,113.2,7.9,7.9,0,0,1,11.3,0,8,8,0,0,1,0,11.3,96,96,0,1,1,0-135.8l20.3,20.3V51.7a8,8,0,1,1,16,0Z" }, null, -1), Z = [
  V
], z = { key: 2 }, L = /* @__PURE__ */ n("path", { d: "M232.2,51.7v48a8,8,0,0,1-8,8h-48a8,8,0,0,1-5.7-13.6l18.4-18.4-4.3-4.3a80,80,0,1,0,0,113.2,7.9,7.9,0,0,1,11.3,0,8,8,0,0,1,0,11.3,96,96,0,1,1,0-135.8l4.3,4.3,18.3-18.3a8,8,0,0,1,8.7-1.8A8.2,8.2,0,0,1,232.2,51.7Z" }, null, -1), B = [
  L
], N = { key: 3 }, b = /* @__PURE__ */ n("path", { d: "M230.2,51.7v48a6,6,0,0,1-6,6h-48a6,6,0,0,1,0-12h33.5L186,70a82,82,0,1,0,0,116,5.9,5.9,0,0,1,8.5,0,6.1,6.1,0,0,1,0,8.5,94,94,0,1,1,0-133l23.7,23.7V51.7a6,6,0,1,1,12,0Z" }, null, -1), A = [
  b
], E = { key: 4 }, P = /* @__PURE__ */ n("path", { d: "M232.2,51.7v48a8,8,0,0,1-8,8h-48a8,8,0,0,1,0-16h28.7L184.6,71.4a80,80,0,1,0,0,113.2,7.9,7.9,0,0,1,11.3,0,8,8,0,0,1,0,11.3,96,96,0,1,1,0-135.8l20.3,20.3V51.7a8,8,0,1,1,16,0Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ n("path", { d: "M228.2,51.7v48a4,4,0,0,1-4,4h-48a4,4,0,0,1,0-8h38.3L187.4,68.6a84,84,0,1,0,0,118.8,4,4,0,0,1,5.7,0,4.2,4.2,0,0,1,0,5.7,92.1,92.1,0,1,1,0-130.2l27.1,27.2V51.7a4,4,0,1,1,8,0Z" }, null, -1), q = [
  j
], D = {
  name: "PhArrowClockwise"
}, H = /* @__PURE__ */ y({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const i = c, d = r("weight", "regular"), _ = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), s = l(() => i.weight ?? d), a = l(() => i.size ?? _), m = l(() => i.color ?? p), u = l(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (h, F) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(m),
      transform: t(u)
    }, h.$attrs), [
      v(h.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", M, C)) : t(s) === "duotone" ? (o(), e("g", S, Z)) : t(s) === "fill" ? (o(), e("g", z, B)) : t(s) === "light" ? (o(), e("g", N, A)) : t(s) === "regular" ? (o(), e("g", E, W)) : t(s) === "thin" ? (o(), e("g", $, q)) : w("", !0)
    ], 16, k));
  }
});
export {
  H as default
};
