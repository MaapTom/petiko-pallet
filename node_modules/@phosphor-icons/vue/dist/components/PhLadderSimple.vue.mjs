import { defineComponent as H, inject as r, computed as a, openBlock as o, createElementBlock as e, mergeProps as g, unref as t, renderSlot as u, createCommentVNode as Z, createElementVNode as n } from "vue";
const M = ["width", "height", "fill", "transform"], y = { key: 0 }, f = /* @__PURE__ */ n("path", { d: "M192,20a12,12,0,0,0-12,12V60H76V32a12,12,0,0,0-24,0V224a12,12,0,0,0,24,0V196H180v28a12,12,0,0,0,24,0V32A12,12,0,0,0,192,20ZM180,84v32H76V84ZM76,172V140H180v32Z" }, null, -1), w = [
  f
], k = { key: 1 }, S = /* @__PURE__ */ n("path", { d: "M192,24a8,8,0,0,0-8,8V64H72V32a8,8,0,0,0-16,0V224a8,8,0,0,0,16,0V192H184v32a8,8,0,0,0,16,0V32A8,8,0,0,0,192,24Zm-8,56v40H72V80ZM72,176V136H184v40Z" }, null, -1), x = [
  S
], A = { key: 2 }, z = /* @__PURE__ */ n("path", { d: "M192,24a8,8,0,0,0-8,8V64H72V32a8,8,0,0,0-16,0V224a8,8,0,0,0,16,0V192H184v32a8,8,0,0,0,16,0V32A8,8,0,0,0,192,24Zm-8,56v40H72V80ZM72,176V136H184v40Z" }, null, -1), C = [
  z
], B = { key: 3 }, N = /* @__PURE__ */ n("path", { d: "M192,26a6,6,0,0,0-6,6V66H70V32a6,6,0,0,0-12,0V224a6,6,0,0,0,12,0V190H186v34a6,6,0,0,0,12,0V32A6,6,0,0,0,192,26Zm-6,52v44H70V78ZM70,178V134H186v44Z" }, null, -1), b = [
  N
], E = { key: 4 }, P = /* @__PURE__ */ n("path", { d: "M192,24a8,8,0,0,0-8,8V64H72V32a8,8,0,0,0-16,0V224a8,8,0,0,0,16,0V192H184v32a8,8,0,0,0,16,0V32A8,8,0,0,0,192,24Zm-8,56v40H72V80ZM72,176V136H184v40Z" }, null, -1), W = [
  P
], $ = { key: 5 }, j = /* @__PURE__ */ n("path", { d: "M192,28a4,4,0,0,0-4,4V68H68V32a4,4,0,0,0-8,0V224a4,4,0,0,0,8,0V188H188v36a4,4,0,0,0,8,0V32A4,4,0,0,0,192,28Zm-4,48v48H68V76ZM68,180V132H188v48Z" }, null, -1), L = [
  j
], q = {
  name: "PhLadderSimple"
}, G = /* @__PURE__ */ H({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, V = r("weight", "regular"), _ = r("size", "1em"), h = r("color", "currentColor"), p = r("mirrored", !1), s = a(() => i.weight ?? V), d = a(() => i.size ?? _), m = a(() => i.color ?? h), v = a(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (c, D) => (o(), e("svg", g({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(m),
      transform: t(v)
    }, c.$attrs), [
      u(c.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", y, w)) : t(s) === "duotone" ? (o(), e("g", k, x)) : t(s) === "fill" ? (o(), e("g", A, C)) : t(s) === "light" ? (o(), e("g", B, b)) : t(s) === "regular" ? (o(), e("g", E, W)) : t(s) === "thin" ? (o(), e("g", $, L)) : Z("", !0)
    ], 16, M));
  }
});
export {
  G as default
};
