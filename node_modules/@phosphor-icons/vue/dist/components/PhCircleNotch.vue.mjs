import { defineComponent as y, inject as r, computed as c, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as A, createCommentVNode as w, createElementVNode as n } from "vue";
const k = ["width", "height", "fill", "transform"], M = { key: 0 }, v = /* @__PURE__ */ n("path", { d: "M236,128A108,108,0,1,1,83,29.8,12,12,0,0,1,93,51.6a84,84,0,1,0,70,0,12,12,0,0,1,10-21.8A108.3,108.3,0,0,1,236,128Z" }, null, -1), x = [
  v
], C = { key: 1 }, S = /* @__PURE__ */ n("path", { d: "M232,128A104,104,0,1,1,84.7,33.4a8.1,8.1,0,0,1,10.6,4,8,8,0,0,1-4,10.6,88,88,0,1,0,73.4,0,8,8,0,0,1-4-10.6,8.1,8.1,0,0,1,10.6-4A104.4,104.4,0,0,1,232,128Z" }, null, -1), Z = [
  S
], z = { key: 2 }, B = /* @__PURE__ */ n("path", { d: "M232,128A104,104,0,1,1,84.7,33.4a8.1,8.1,0,0,1,10.6,4,8,8,0,0,1-4,10.6,88,88,0,1,0,73.4,0,8,8,0,0,1-4-10.6,8.1,8.1,0,0,1,10.6-4A104.4,104.4,0,0,1,232,128Z" }, null, -1), N = [
  B
], b = { key: 3 }, E = /* @__PURE__ */ n("path", { d: "M230,128A102,102,0,1,1,85.5,35.3a6,6,0,0,1,8,2.9,6.2,6.2,0,0,1-3,8,90,90,0,1,0,75,0,6.2,6.2,0,0,1-3-8,6,6,0,0,1,8-2.9A102.2,102.2,0,0,1,230,128Z" }, null, -1), P = [
  E
], V = { key: 4 }, W = /* @__PURE__ */ n("path", { d: "M232,128A104,104,0,1,1,84.7,33.4a8.1,8.1,0,0,1,10.6,4,8,8,0,0,1-4,10.6,88,88,0,1,0,73.4,0,8,8,0,0,1-4-10.6,8.1,8.1,0,0,1,10.6-4A104.4,104.4,0,0,1,232,128Z" }, null, -1), $ = [
  W
], j = { key: 5 }, q = /* @__PURE__ */ n("path", { d: "M228,128A100,100,0,1,1,86.3,37.1a4,4,0,1,1,3.4,7.2,92,92,0,1,0,76.6,0,3.9,3.9,0,0,1-1.9-5.3,4,4,0,0,1,5.3-1.9A100.2,100.2,0,0,1,228,128Z" }, null, -1), D = [
  q
], F = {
  name: "PhCircleNotch"
}, I = /* @__PURE__ */ y({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(_) {
    const i = _, h = r("weight", "regular"), a = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), s = c(() => i.weight ?? h), d = c(() => i.size ?? a), m = c(() => i.color ?? p), u = c(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (l, G) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(m),
      transform: t(u)
    }, l.$attrs), [
      A(l.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", M, x)) : t(s) === "duotone" ? (o(), e("g", C, Z)) : t(s) === "fill" ? (o(), e("g", z, N)) : t(s) === "light" ? (o(), e("g", b, P)) : t(s) === "regular" ? (o(), e("g", V, $)) : t(s) === "thin" ? (o(), e("g", j, D)) : w("", !0)
    ], 16, k));
  }
});
export {
  I as default
};
