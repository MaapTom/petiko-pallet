import { defineComponent as A, inject as r, computed as a, openBlock as o, createElementBlock as e, mergeProps as Z, unref as t, renderSlot as y, createCommentVNode as M, createElementVNode as n } from "vue";
const f = ["width", "height", "fill", "transform"], H = { key: 0 }, w = /* @__PURE__ */ n("path", { d: "M228,128a12,12,0,0,1-12,12H40a12,12,0,0,1,0-24H216A12,12,0,0,1,228,128ZM128,84a20,20,0,1,0-20-20A20.1,20.1,0,0,0,128,84Zm0,88a20,20,0,1,0,20,20A20.1,20.1,0,0,0,128,172Z" }, null, -1), k = [
  w
], v = { key: 1 }, x = /* @__PURE__ */ n("path", { d: "M224,128a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM128,80a16,16,0,1,0-16-16A16,16,0,0,0,128,80Zm0,96a16,16,0,1,0,16,16A16,16,0,0,0,128,176Z" }, null, -1), S = [
  x
], z = { key: 2 }, C = /* @__PURE__ */ n("path", { d: "M224,128a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM128,80a16,16,0,1,0-16-16A16,16,0,0,0,128,80Zm0,96a16,16,0,1,0,16,16A16,16,0,0,0,128,176Z" }, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ n("path", { d: "M222,128a6,6,0,0,1-6,6H40a6,6,0,0,1,0-12H216A6,6,0,0,1,222,128ZM128,78a14,14,0,1,0-14-14A14,14,0,0,0,128,78Zm0,100a14,14,0,1,0,14,14A14,14,0,0,0,128,178Z" }, null, -1), E = [
  b
], P = { key: 4 }, V = /* @__PURE__ */ n("path", { d: "M224,128a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM128,80a16,16,0,1,0-16-16A16,16,0,0,0,128,80Zm0,96a16,16,0,1,0,16,16A16,16,0,0,0,128,176Z" }, null, -1), W = [
  V
], $ = { key: 5 }, j = /* @__PURE__ */ n("path", { d: "M220,128a4,4,0,0,1-4,4H40a4,4,0,0,1,0-8H216A4,4,0,0,1,220,128ZM128,76a12,12,0,1,0-12-12A12,12,0,0,0,128,76Zm0,104a12,12,0,1,0,12,12A12,12,0,0,0,128,180Z" }, null, -1), D = [
  j
], q = {
  name: "PhDivide"
}, I = /* @__PURE__ */ A({
  ...q,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = r("weight", "regular"), h = r("size", "1em"), m = r("color", "currentColor"), p = r("mirrored", !1), s = a(() => i.weight ?? _), d = a(() => i.size ?? h), g = a(() => i.color ?? m), u = a(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : p ? "scale(-1, 1)" : void 0);
    return (c, F) => (o(), e("svg", Z({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(g),
      transform: t(u)
    }, c.$attrs), [
      y(c.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", H, k)) : t(s) === "duotone" ? (o(), e("g", v, S)) : t(s) === "fill" ? (o(), e("g", z, B)) : t(s) === "light" ? (o(), e("g", N, E)) : t(s) === "regular" ? (o(), e("g", P, W)) : t(s) === "thin" ? (o(), e("g", $, D)) : M("", !0)
    ], 16, f));
  }
});
export {
  I as default
};
