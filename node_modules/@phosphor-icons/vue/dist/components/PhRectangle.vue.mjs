import { defineComponent as u, inject as r, computed as c, openBlock as e, createElementBlock as s, mergeProps as H, unref as t, renderSlot as y, createCommentVNode as f, createElementVNode as o } from "vue";
const M = ["width", "height", "fill", "transform"], A = { key: 0 }, w = /* @__PURE__ */ o("path", { d: "M216,220H40a20.1,20.1,0,0,1-20-20V56A20.1,20.1,0,0,1,40,36H216a20.1,20.1,0,0,1,20,20V200A20.1,20.1,0,0,1,216,220ZM44,196H212V60H44Z" }, null, -1), Z = [
  w
], k = { key: 1 }, x = /* @__PURE__ */ o("g", { opacity: "0.2" }, [
  /* @__PURE__ */ o("rect", {
    x: "32",
    y: "48",
    width: "192",
    height: "160",
    rx: "8"
  })
], -1), v = /* @__PURE__ */ o("path", { d: "M216,216H40a16,16,0,0,1-16-16V56A16,16,0,0,1,40,40H216a16,16,0,0,1,16,16V200A16,16,0,0,1,216,216ZM40,56V200H216V56Z" }, null, -1), S = [
  x,
  v
], z = { key: 2 }, C = /* @__PURE__ */ o("path", { d: "M232,56V200a16,16,0,0,1-16,16H40a16,16,0,0,1-16-16V56A16,16,0,0,1,40,40H216A16,16,0,0,1,232,56Z" }, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ o("path", { d: "M216,214H40a14,14,0,0,1-14-14V56A14,14,0,0,1,40,42H216a14,14,0,0,1,14,14V200A14,14,0,0,1,216,214ZM40,54a2,2,0,0,0-2,2V200a2,2,0,0,0,2,2H216a2,2,0,0,0,2-2V56a2,2,0,0,0-2-2Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ o("path", { d: "M216,216H40a16,16,0,0,1-16-16V56A16,16,0,0,1,40,40H216a16,16,0,0,1,16,16V200A16,16,0,0,1,216,216ZM40,56V200H216V56Z" }, null, -1), $ = [
  W
], j = { key: 5 }, R = /* @__PURE__ */ o("path", { d: "M216,212H40a12,12,0,0,1-12-12V56A12,12,0,0,1,40,44H216a12,12,0,0,1,12,12V200A12,12,0,0,1,216,212ZM40,52a4,4,0,0,0-4,4V200a4,4,0,0,0,4,4H216a4,4,0,0,0,4-4V56a4,4,0,0,0-4-4Z" }, null, -1), q = [
  R
], D = {
  name: "PhRectangle"
}, I = /* @__PURE__ */ u({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), n = c(() => i.weight ?? _), d = c(() => i.size ?? h), V = c(() => i.color ?? p), m = c(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (a, F) => (e(), s("svg", H({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(V),
      transform: t(m)
    }, a.$attrs), [
      y(a.$slots, "default"),
      t(n) === "bold" ? (e(), s("g", A, Z)) : t(n) === "duotone" ? (e(), s("g", k, S)) : t(n) === "fill" ? (e(), s("g", z, B)) : t(n) === "light" ? (e(), s("g", N, E)) : t(n) === "regular" ? (e(), s("g", P, $)) : t(n) === "thin" ? (e(), s("g", j, q)) : f("", !0)
    ], 16, M));
  }
});
export {
  I as default
};
