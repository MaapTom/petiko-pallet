import { defineComponent as m, inject as r, computed as c, openBlock as e, createElementBlock as s, mergeProps as H, unref as t, renderSlot as y, createCommentVNode as f, createElementVNode as o } from "vue";
const M = ["width", "height", "fill", "transform"], A = { key: 0 }, w = /* @__PURE__ */ o("path", { d: "M208,228H48a20.1,20.1,0,0,1-20-20V48A20.1,20.1,0,0,1,48,28H208a20.1,20.1,0,0,1,20,20V208A20.1,20.1,0,0,1,208,228ZM52,204H204V52H52Z" }, null, -1), Z = [
  w
], k = { key: 1 }, x = /* @__PURE__ */ o("g", { opacity: "0.2" }, [
  /* @__PURE__ */ o("rect", {
    x: "40",
    y: "40",
    width: "176",
    height: "176",
    rx: "8"
  })
], -1), S = /* @__PURE__ */ o("path", { d: "M208,224H48a16,16,0,0,1-16-16V48A16,16,0,0,1,48,32H208a16,16,0,0,1,16,16V208A16,16,0,0,1,208,224ZM48,48V208H208V48Z" }, null, -1), v = [
  x,
  S
], z = { key: 2 }, C = /* @__PURE__ */ o("path", { d: "M224,48V208a16,16,0,0,1-16,16H48a16,16,0,0,1-16-16V48A16,16,0,0,1,48,32H208A16,16,0,0,1,224,48Z" }, null, -1), B = [
  C
], N = { key: 3 }, b = /* @__PURE__ */ o("path", { d: "M208,222H48a14,14,0,0,1-14-14V48A14,14,0,0,1,48,34H208a14,14,0,0,1,14,14V208A14,14,0,0,1,208,222ZM48,46a2,2,0,0,0-2,2V208a2,2,0,0,0,2,2H208a2,2,0,0,0,2-2V48a2,2,0,0,0-2-2Z" }, null, -1), E = [
  b
], P = { key: 4 }, W = /* @__PURE__ */ o("path", { d: "M208,224H48a16,16,0,0,1-16-16V48A16,16,0,0,1,48,32H208a16,16,0,0,1,16,16V208A16,16,0,0,1,208,224ZM48,48V208H208V48Z" }, null, -1), $ = [
  W
], j = { key: 5 }, q = /* @__PURE__ */ o("path", { d: "M208,220H48a12,12,0,0,1-12-12V48A12,12,0,0,1,48,36H208a12,12,0,0,1,12,12V208A12,12,0,0,1,208,220ZM48,44a4,4,0,0,0-4,4V208a4,4,0,0,0,4,4H208a4,4,0,0,0,4-4V48a4,4,0,0,0-4-4Z" }, null, -1), D = [
  q
], F = {
  name: "PhSquare"
}, J = /* @__PURE__ */ m({
  ...F,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), n = c(() => i.weight ?? _), d = c(() => i.size ?? h), V = c(() => i.color ?? p), u = c(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (a, G) => (e(), s("svg", H({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(V),
      transform: t(u)
    }, a.$attrs), [
      y(a.$slots, "default"),
      t(n) === "bold" ? (e(), s("g", A, Z)) : t(n) === "duotone" ? (e(), s("g", k, v)) : t(n) === "fill" ? (e(), s("g", z, B)) : t(n) === "light" ? (e(), s("g", N, E)) : t(n) === "regular" ? (e(), s("g", P, $)) : t(n) === "thin" ? (e(), s("g", j, D)) : f("", !0)
    ], 16, M));
  }
});
export {
  J as default
};
