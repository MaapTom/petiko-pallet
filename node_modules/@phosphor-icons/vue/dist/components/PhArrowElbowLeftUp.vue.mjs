import { defineComponent as f, inject as i, computed as l, openBlock as o, createElementBlock as e, mergeProps as y, unref as t, renderSlot as H, createCommentVNode as V, createElementVNode as n } from "vue";
const w = ["width", "height", "fill", "transform"], L = { key: 0 }, A = /* @__PURE__ */ n("path", { d: "M236,192a12,12,0,0,1-12,12H80a12,12,0,0,1-12-12V77L40.5,104.5a12,12,0,0,1-17-17l48-48a12,12,0,0,1,17,0l48,48a12,12,0,0,1,0,17,12.1,12.1,0,0,1-17,0L92,77V180H224A12,12,0,0,1,236,192Z" }, null, -1), k = [
  A
], M = { key: 1 }, v = /* @__PURE__ */ n("path", { d: "M232,192a8,8,0,0,1-8,8H80a8,8,0,0,1-8-8V67.3L37.7,101.7A8.1,8.1,0,0,1,26.3,90.3l48-48a8.1,8.1,0,0,1,11.4,0l48,48a8.1,8.1,0,0,1,0,11.4,8.2,8.2,0,0,1-11.4,0L88,67.3V184H224A8,8,0,0,1,232,192Z" }, null, -1), x = [
  v
], S = { key: 2 }, Z = /* @__PURE__ */ n("path", { d: "M232,192a8,8,0,0,1-8,8H80a8,8,0,0,1-8-8V104H32a8,8,0,0,1-7.4-4.9,8.4,8.4,0,0,1,1.7-8.8l48-48a8.1,8.1,0,0,1,11.4,0l48,48a8.4,8.4,0,0,1,1.7,8.8A8,8,0,0,1,128,104H88v80H224A8,8,0,0,1,232,192Z" }, null, -1), z = [
  Z
], C = { key: 3 }, B = /* @__PURE__ */ n("path", { d: "M230,192a6,6,0,0,1-6,6H80a6,6,0,0,1-6-6V62.5L36.2,100.2a5.9,5.9,0,1,1-8.4-8.4l48-48a5.8,5.8,0,0,1,8.4,0l48,48a5.9,5.9,0,1,1-8.4,8.4L86,62.5V186H224A6,6,0,0,1,230,192Z" }, null, -1), b = [
  B
], E = { key: 4 }, N = /* @__PURE__ */ n("path", { d: "M232,192a8,8,0,0,1-8,8H80a8,8,0,0,1-8-8V67.3L37.7,101.7A8.1,8.1,0,0,1,26.3,90.3l48-48a8.1,8.1,0,0,1,11.4,0l48,48a8.1,8.1,0,0,1,0,11.4,8.2,8.2,0,0,1-11.4,0L88,67.3V184H224A8,8,0,0,1,232,192Z" }, null, -1), P = [
  N
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M228,192a4,4,0,0,1-4,4H80a4,4,0,0,1-4-4V57.7L34.8,98.8a4,4,0,0,1-5.6-5.6l48-48a3.9,3.9,0,0,1,5.6,0l48,48a3.9,3.9,0,0,1,0,5.6,3.9,3.9,0,0,1-5.6,0L84,57.7V188H224A4,4,0,0,1,228,192Z" }, null, -1), j = [
  $
], U = {
  name: "PhArrowElbowLeftUp"
}, F = /* @__PURE__ */ f({
  ...U,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const r = c, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), g = i("mirrored", !1), s = l(() => r.weight ?? _), a = l(() => r.size ?? h), m = l(() => r.color ?? p), u = l(() => r.mirrored !== void 0 ? r.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, q) => (o(), e("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(a),
      height: t(a),
      fill: t(m),
      transform: t(u)
    }, d.$attrs), [
      H(d.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", L, k)) : t(s) === "duotone" ? (o(), e("g", M, x)) : t(s) === "fill" ? (o(), e("g", S, z)) : t(s) === "light" ? (o(), e("g", C, b)) : t(s) === "regular" ? (o(), e("g", E, P)) : t(s) === "thin" ? (o(), e("g", W, j)) : V("", !0)
    ], 16, w));
  }
});
export {
  F as default
};
