import { defineComponent as u, inject as r, computed as a, openBlock as e, createElementBlock as s, mergeProps as y, unref as t, renderSlot as f, createCommentVNode as M, createElementVNode as o } from "vue";
const Z = ["width", "height", "fill", "transform"], w = { key: 0 }, k = /* @__PURE__ */ o("path", { d: "M244,116H190.9a64,64,0,0,0-125.7,0H12a12,12,0,0,0,0,24H65.2a64,64,0,0,0,125.7,0H244a12,12,0,0,0,0-24ZM128,168a40,40,0,1,1,40-40A40.1,40.1,0,0,1,128,168Z" }, null, -1), x = [
  k
], v = { key: 1 }, A = /* @__PURE__ */ o("g", { opacity: "0.2" }, [
  /* @__PURE__ */ o("circle", {
    cx: "128",
    cy: "128",
    r: "52"
  })
], -1), C = /* @__PURE__ */ o("path", { d: "M248,120H187.5a60,60,0,0,0-118.9,0H8a8,8,0,0,0,0,16H68.6a60,60,0,0,0,118.9,0H248a8,8,0,0,0,0-16ZM128,172a44,44,0,1,1,44-44A44.1,44.1,0,0,1,128,172Z" }, null, -1), S = [
  A,
  C
], z = { key: 2 }, B = /* @__PURE__ */ o("path", { d: "M256,128a8,8,0,0,1-8,8H187.5a60,60,0,0,1-118.9,0H8a8,8,0,0,1,0-16H68.6a60,60,0,0,1,118.9,0H248A8,8,0,0,1,256,128Z" }, null, -1), N = [
  B
], b = { key: 3 }, E = /* @__PURE__ */ o("path", { d: "M248,122H185.7a58,58,0,0,0-115.4,0H8a6,6,0,0,0,0,12H70.3a58,58,0,0,0,115.4,0H248a6,6,0,0,0,0-12ZM128,174a46,46,0,1,1,46-46A46,46,0,0,1,128,174Z" }, null, -1), P = [
  E
], V = { key: 4 }, W = /* @__PURE__ */ o("path", { d: "M248,120H187.5a60,60,0,0,0-119,0H8a8,8,0,0,0,0,16H68.5a60,60,0,0,0,119,0H248a8,8,0,0,0,0-16ZM128,172a44,44,0,1,1,44-44A44,44,0,0,1,128,172Z" }, null, -1), $ = [
  W
], j = { key: 5 }, G = /* @__PURE__ */ o("path", { d: "M248,124H183.8a55.9,55.9,0,0,0-111.6,0H8a4,4,0,0,0,0,8H72.2a55.9,55.9,0,0,0,111.6,0H248a4,4,0,0,0,0-8ZM128,176a48,48,0,1,1,48-48A48,48,0,0,1,128,176Z" }, null, -1), q = [
  G
], D = {
  name: "PhGitCommit"
}, J = /* @__PURE__ */ u({
  ...D,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(l) {
    const i = l, _ = r("weight", "regular"), h = r("size", "1em"), p = r("color", "currentColor"), g = r("mirrored", !1), n = a(() => i.weight ?? _), c = a(() => i.size ?? h), H = a(() => i.color ?? p), m = a(() => i.mirrored !== void 0 ? i.mirrored ? "scale(-1, 1)" : void 0 : g ? "scale(-1, 1)" : void 0);
    return (d, F) => (e(), s("svg", y({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(c),
      height: t(c),
      fill: t(H),
      transform: t(m)
    }, d.$attrs), [
      f(d.$slots, "default"),
      t(n) === "bold" ? (e(), s("g", w, x)) : t(n) === "duotone" ? (e(), s("g", v, S)) : t(n) === "fill" ? (e(), s("g", z, N)) : t(n) === "light" ? (e(), s("g", b, P)) : t(n) === "regular" ? (e(), s("g", V, $)) : t(n) === "thin" ? (e(), s("g", j, q)) : M("", !0)
    ], 16, Z));
  }
});
export {
  J as default
};
