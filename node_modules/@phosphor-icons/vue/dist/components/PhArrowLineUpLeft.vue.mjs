import { defineComponent as u, inject as i, computed as r, openBlock as o, createElementBlock as e, mergeProps as f, unref as t, renderSlot as y, createCommentVNode as V, createElementVNode as n } from "vue";
const Z = ["width", "height", "fill", "transform"], w = { key: 0 }, L = /* @__PURE__ */ n("path", { d: "M52,156V56A12,12,0,0,1,64,44H164a12,12,0,0,1,0,24H93l91.5,91.5a12,12,0,0,1,0,17,12.1,12.1,0,0,1-17,0L76,85v71a12,12,0,0,1-24,0Zm164,48H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Z" }, null, -1), k = [
  L
], M = { key: 1 }, v = /* @__PURE__ */ n("path", { d: "M56,156V56a8,8,0,0,1,8-8H164a8,8,0,0,1,0,16H83.3l98.4,98.3a8.1,8.1,0,0,1,0,11.4,8.2,8.2,0,0,1-11.4,0L72,75.3V156a8,8,0,0,1-16,0Zm160,52H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }, null, -1), x = [
  v
], S = { key: 2 }, z = /* @__PURE__ */ n("path", { d: "M56,156V56a8,8,0,0,1,8-8H164a8,8,0,0,1,7.4,4.9,8.4,8.4,0,0,1-1.7,8.8L125.3,106l56.4,56.3a8.1,8.1,0,0,1,0,11.4,8.2,8.2,0,0,1-11.4,0L114,117.3,69.7,161.7A8.3,8.3,0,0,1,64,164a8.5,8.5,0,0,1-3.1-.6A8,8,0,0,1,56,156Zm160,52H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }, null, -1), C = [
  z
], A = { key: 3 }, B = /* @__PURE__ */ n("path", { d: "M58,156V56a6,6,0,0,1,6-6H164a6,6,0,0,1,0,12H78.5L180.2,163.8a5.9,5.9,0,1,1-8.4,8.4L70,70.5V156a6,6,0,0,1-12,0Zm158,54H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Z" }, null, -1), N = [
  B
], b = { key: 4 }, E = /* @__PURE__ */ n("path", { d: "M56,156V56a8,8,0,0,1,8-8H164a8,8,0,0,1,0,16H83.3l98.4,98.3a8.1,8.1,0,0,1,0,11.4,8.2,8.2,0,0,1-11.4,0L72,75.3V156a8,8,0,0,1-16,0Zm160,52H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }, null, -1), P = [
  E
], W = { key: 5 }, $ = /* @__PURE__ */ n("path", { d: "M60,156V56a4,4,0,0,1,4-4H164a4,4,0,0,1,0,8H73.7L178.8,165.2a3.9,3.9,0,0,1,0,5.6,3.9,3.9,0,0,1-5.6,0L68,65.7V156a4,4,0,0,1-8,0Zm156,56H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Z" }, null, -1), j = [
  $
], U = {
  name: "PhArrowLineUpLeft"
}, F = /* @__PURE__ */ u({
  ...U,
  props: {
    weight: {
      type: String
    },
    size: {
      type: [String, Number]
    },
    color: {
      type: String
    },
    mirrored: {
      type: Boolean
    }
  },
  setup(c) {
    const a = c, _ = i("weight", "regular"), h = i("size", "1em"), p = i("color", "currentColor"), m = i("mirrored", !1), s = r(() => a.weight ?? _), d = r(() => a.size ?? h), g = r(() => a.color ?? p), H = r(() => a.mirrored !== void 0 ? a.mirrored ? "scale(-1, 1)" : void 0 : m ? "scale(-1, 1)" : void 0);
    return (l, q) => (o(), e("svg", f({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 256 256",
      width: t(d),
      height: t(d),
      fill: t(g),
      transform: t(H)
    }, l.$attrs), [
      y(l.$slots, "default"),
      t(s) === "bold" ? (o(), e("g", w, k)) : t(s) === "duotone" ? (o(), e("g", M, x)) : t(s) === "fill" ? (o(), e("g", S, C)) : t(s) === "light" ? (o(), e("g", A, N)) : t(s) === "regular" ? (o(), e("g", b, P)) : t(s) === "thin" ? (o(), e("g", W, j)) : V("", !0)
    ], 16, Z));
  }
});
export {
  F as default
};
